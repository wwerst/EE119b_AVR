
AVRASM ver. 2.1.42  \\VBOXSVR\EE119b_AVR\tests\flow_cond_branch.asm Thu Mar 25 21:07:08 2021

                 
                 
                 ; Tests the flow control conditional branch instructions.
                 ; These tests assume the BSET and BCLR instructions are functional.
                 ; THIS FILE IS GENERATED
                 ; for explanations or modifications, see notebook cond_branch.ipynb
                 
                 
                 ;PREPROCESS TestBRBS
000000 9408          BSET    0               ;
000001 f070          BRBS    0      ,branchSet0;J           bit set => branch should be taken
                     .ORG    0x0010          ;
                 branchSet0:
000010 9488          BCLR    0               ;
000011 f3f0          BRBS    0      ,branchSet0;            bit cleared => branch should not be taken
000012 9418          BSET    1               ;
000013 f061          BRBS    1      ,branchSet1;J           bit set => branch should be taken
                     .ORG    0x0020          ;
                 branchSet1:
000020 9498          BCLR    1               ;
000021 f3f1          BRBS    1      ,branchSet1;            bit cleared => branch should not be taken
000022 9428          BSET    2               ;
000023 f062          BRBS    2      ,branchSet2;J           bit set => branch should be taken
                     .ORG    0x0030          ;
                 branchSet2:
000030 94a8          BCLR    2               ;
000031 f3f2          BRBS    2      ,branchSet2;            bit cleared => branch should not be taken
000032 9438          BSET    3               ;
000033 f063          BRBS    3      ,branchSet3;J           bit set => branch should be taken
                     .ORG    0x0040          ;
                 branchSet3:
000040 94b8          BCLR    3               ;
000041 f3f3          BRBS    3      ,branchSet3;            bit cleared => branch should not be taken
000042 9448          BSET    4               ;
000043 f064          BRBS    4      ,branchSet4;J           bit set => branch should be taken
                     .ORG    0x0050          ;
                 branchSet4:
000050 94c8          BCLR    4               ;
000051 f3f4          BRBS    4      ,branchSet4;            bit cleared => branch should not be taken
000052 9458          BSET    5               ;
000053 f065          BRBS    5      ,branchSet5;J           bit set => branch should be taken
                     .ORG    0x0060          ;
                 branchSet5:
000060 94d8          BCLR    5               ;
000061 f3f5          BRBS    5      ,branchSet5;            bit cleared => branch should not be taken
000062 9468          BSET    6               ;
000063 f066          BRBS    6      ,branchSet6;J           bit set => branch should be taken
                     .ORG    0x0070          ;
                 branchSet6:
000070 94e8          BCLR    6               ;
000071 f3f6          BRBS    6      ,branchSet6;            bit cleared => branch should not be taken
000072 9478          BSET    7               ;
000073 f067          BRBS    7      ,branchSet7;J           bit set => branch should be taken
                     .ORG    0x0080          ;
                 branchSet7:
000080 94f8          BCLR    7               ;
000081 f3f7          BRBS    7      ,branchSet7;            bit cleared => branch should not be taken
                 
                 ;PREPROCESS TestBRBC
000082 9488          BCLR    0               ;
000083 f460          BRBC    0      ,branchClear0;J           bit clear => branch should be taken
                     .ORG    0x0090          ;
                 branchClear0:
000090 9408          BSET    0               ;
000091 f7f0          BRBC    0      ,branchClear0;            bit set => branch should not be taken
000092 9498          BCLR    1               ;
000093 f461          BRBC    1      ,branchClear1;J           bit clear => branch should be taken
                     .ORG    0x00A0          ;
                 branchClear1:
0000a0 9418          BSET    1               ;
0000a1 f7f1          BRBC    1      ,branchClear1;            bit set => branch should not be taken
0000a2 94a8          BCLR    2               ;
0000a3 f462          BRBC    2      ,branchClear2;J           bit clear => branch should be taken
                     .ORG    0x00B0          ;
                 branchClear2:
0000b0 9428          BSET    2               ;
0000b1 f7f2          BRBC    2      ,branchClear2;            bit set => branch should not be taken
0000b2 94b8          BCLR    3               ;
0000b3 f463          BRBC    3      ,branchClear3;J           bit clear => branch should be taken
                     .ORG    0x00C0          ;
                 branchClear3:
0000c0 9438          BSET    3               ;
0000c1 f7f3          BRBC    3      ,branchClear3;            bit set => branch should not be taken
0000c2 94c8          BCLR    4               ;
0000c3 f464          BRBC    4      ,branchClear4;J           bit clear => branch should be taken
                     .ORG    0x00D0          ;
                 branchClear4:
0000d0 9448          BSET    4               ;
0000d1 f7f4          BRBC    4      ,branchClear4;            bit set => branch should not be taken
0000d2 94d8          BCLR    5               ;
0000d3 f465          BRBC    5      ,branchClear5;J           bit clear => branch should be taken
                     .ORG    0x00E0          ;
                 branchClear5:
0000e0 9458          BSET    5               ;
0000e1 f7f5          BRBC    5      ,branchClear5;            bit set => branch should not be taken
0000e2 94e8          BCLR    6               ;
0000e3 f466          BRBC    6      ,branchClear6;J           bit clear => branch should be taken
                     .ORG    0x00F0          ;
                 branchClear6:
0000f0 9468          BSET    6               ;
0000f1 f7f6          BRBC    6      ,branchClear6;            bit set => branch should not be taken
0000f2 94f8          BCLR    7               ;
0000f3 f467          BRBC    7      ,branchClear7;J           bit clear => branch should be taken
                     .ORG    0x0100          ;
                 branchClear7:
000100 9478          BSET    7               ;


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

Register use summary:
r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   0 r18:   0 r19:   0 r20:   0 r21:   0 r22:   0 r23:   0 
r24:   0 r25:   0 r26:   0 r27:   0 r28:   0 r29:   0 r30:   0 r31:   0 
x  :   0 y  :   0 z  :   0 
Registers used: 0 out of 35 (0.0%)

Instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   0 adiw  :   0 and   :   0 
andi  :   0 asr   :   0 bclr  :  16 bld   :   0 brbc  :  16 brbs  :  16 
brcc  :   0 brcs  :   0 breq  :   0 brge  :   0 brhc  :   0 brhs  :   0 
brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 brne  :   0 
brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 brvs  :   0 
bset  :  16 bst   :   0 cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 
cli   :   0 cln   :   0 clr   :   0 cls   :   0 clt   :   0 clv   :   0 
clz   :   0 com   :   0 cp    :   0 cpc   :   0 cpi   :   0 cpse  :   0 
dec   :   0 eor   :   0 icall :   0 ijmp  :   0 in    :   0 inc   :   0 
ld    :   0 ldd   :   0 ldi   :   0 lds   :   0 lpm   :   0 lsl   :   0 
lsr   :   0 mov   :   0 neg   :   0 nop   :   0 or    :   0 ori   :   0 
out   :   0 pop   :   0 push  :   0 rcall :   0 ret   :   0 reti  :   0 
rjmp  :   0 rol   :   0 ror   :   0 sbc   :   0 sbci  :   0 sbi   :   0 
sbic  :   0 sbis  :   0 sbiw  :   0 sbr   :   0 sbrc  :   0 sbrs  :   0 
sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 ses   :   0 
set   :   0 sev   :   0 sez   :   0 sleep :   0 st    :   0 std   :   0 
sts   :   0 sub   :   0 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 

Instructions used: 4 out of 102 (3.9%)

Memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000204    128      0    128 unknown      -
[.dseg] 0x000060 0x000060      0      0      0 unknown      -
[.eseg] 0x000000 0x000000      0      0      0 unknown      -

Assembly complete, 0 errors, 0 warnings
