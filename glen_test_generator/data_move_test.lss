
AVRASM ver. 2.1.51  C:\Users\Will\Documents\AVRStudio 5.1\AVRAssembler1\AVRAssembler1\AVRAssembler1.asm Thu Mar 25 03:29:33 2021

[builtin](2): Including file 'C:\Program Files (x86)\Atmel\AVR Studio 5.1\extensions\Atmel\AVRAssembler\2.1.51.17\AvrAssembler/Include\m88def.inc'
                 
                 
                 
                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega88.xml ************
                 ;*************************************************************************
                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                 ;* 
                 ;* Number            : AVR000
                 ;* File Name         : "m88def.inc"
                 ;* Title             : Register/Bit Definitions for the ATmega88
                 ;* Date              : 2011-02-09
                 ;* Version           : 2.35
                 ;* Support E-mail    : avr@atmel.com
                 ;* Target MCU        : ATmega88
                 ;* 
                 ;* DESCRIPTION
                 ;* When including this file in the assembly program file, all I/O register 
                 ;* names and I/O register bit names appearing in the data book can be used.
                 ;* In addition, the six registers forming the three data pointers X, Y and 
                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                 ;* SRAM is also defined 
                 ;* 
                 ;* The Register names are represented by their hexadecimal address.
                 ;* 
                 ;* The Register Bit names are represented by their bit number (0-7).
                 ;* 
                 ;* Please observe the difference in using the bit names with instructions
                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                 ;* (skip if bit in register set/cleared). The following example illustrates
                 ;* this:
                 ;* 
                 ;* in    r16,PORTB             ;read PORTB latch
                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                 ;* out   PORTB,r16             ;output to PORTB
                 ;* 
                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                 ;* rjmp  TOV0_is_set           ;jump if set
                 ;* ...                         ;otherwise do something else
                 ;*************************************************************************
                 
                 #ifndef _M88DEF_INC_
                 #define _M88DEF_INC_
                 
                 
                 #pragma partinc 0
                 
                 ; ***** SPECIFY DEVICE ***************************************************
                 .device ATmega88
                 #pragma AVRPART ADMIN PART_NAME ATmega88
                 .equ   SIGNATURE_000   = 0x1e
                 .equ   SIGNATURE_001   = 0x93
                 .equ   SIGNATURE_002   = 0x0a
                 
                 #pragma AVRPART CORE CORE_VERSION V2E
                 
                 
                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                 ; NOTE:
                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                 ; and cannot be used with IN/OUT instructions
                 .equ   UDR0    = 0xc6  ; MEMORY MAPPED
                 .equ   UBRR0L  = 0xc4  ; MEMORY MAPPED
                 .equ   UBRR0H  = 0xc5  ; MEMORY MAPPED
                 .equ   UCSR0C  = 0xc2  ; MEMORY MAPPED
                 .equ   UCSR0B  = 0xc1  ; MEMORY MAPPED
                 .equ   UCSR0A  = 0xc0  ; MEMORY MAPPED
                 .equ   TWAMR   = 0xbd  ; MEMORY MAPPED
                 .equ   TWCR    = 0xbc  ; MEMORY MAPPED
                 .equ   TWDR    = 0xbb  ; MEMORY MAPPED
                 .equ   TWAR    = 0xba  ; MEMORY MAPPED
                 .equ   TWSR    = 0xb9  ; MEMORY MAPPED
                 .equ   TWBR    = 0xb8  ; MEMORY MAPPED
                 .equ   ASSR    = 0xb6  ; MEMORY MAPPED
                 .equ   OCR2B   = 0xb4  ; MEMORY MAPPED
                 .equ   OCR2A   = 0xb3  ; MEMORY MAPPED
                 .equ   TCNT2   = 0xb2  ; MEMORY MAPPED
                 .equ   TCCR2B  = 0xb1  ; MEMORY MAPPED
                 .equ   TCCR2A  = 0xb0  ; MEMORY MAPPED
                 .equ   OCR1BL  = 0x8a  ; MEMORY MAPPED
                 .equ   OCR1BH  = 0x8b  ; MEMORY MAPPED
                 .equ   OCR1AL  = 0x88  ; MEMORY MAPPED
                 .equ   OCR1AH  = 0x89  ; MEMORY MAPPED
                 .equ   ICR1L   = 0x86  ; MEMORY MAPPED
                 .equ   ICR1H   = 0x87  ; MEMORY MAPPED
                 .equ   TCNT1L  = 0x84  ; MEMORY MAPPED
                 .equ   TCNT1H  = 0x85  ; MEMORY MAPPED
                 .equ   TCCR1C  = 0x82  ; MEMORY MAPPED
                 .equ   TCCR1B  = 0x81  ; MEMORY MAPPED
                 .equ   TCCR1A  = 0x80  ; MEMORY MAPPED
                 .equ   DIDR1   = 0x7f  ; MEMORY MAPPED
                 .equ   DIDR0   = 0x7e  ; MEMORY MAPPED
                 .equ   ADMUX   = 0x7c  ; MEMORY MAPPED
                 .equ   ADCSRB  = 0x7b  ; MEMORY MAPPED
                 .equ   ADCSRA  = 0x7a  ; MEMORY MAPPED
                 .equ   ADCH    = 0x79  ; MEMORY MAPPED
                 .equ   ADCL    = 0x78  ; MEMORY MAPPED
                 .equ   TIMSK2  = 0x70  ; MEMORY MAPPED
                 .equ   TIMSK1  = 0x6f  ; MEMORY MAPPED
                 .equ   TIMSK0  = 0x6e  ; MEMORY MAPPED
                 .equ   PCMSK1  = 0x6c  ; MEMORY MAPPED
                 .equ   PCMSK2  = 0x6d  ; MEMORY MAPPED
                 .equ   PCMSK0  = 0x6b  ; MEMORY MAPPED
                 .equ   EICRA   = 0x69  ; MEMORY MAPPED
                 .equ   PCICR   = 0x68  ; MEMORY MAPPED
                 .equ   OSCCAL  = 0x66  ; MEMORY MAPPED
                 .equ   PRR     = 0x64  ; MEMORY MAPPED
                 .equ   CLKPR   = 0x61  ; MEMORY MAPPED
                 .equ   WDTCSR  = 0x60  ; MEMORY MAPPED
                 .equ   SREG    = 0x3f
                 .equ   SPL     = 0x3d
                 .equ   SPH     = 0x3e
                 .equ   SPMCSR  = 0x37
                 .equ   MCUCR   = 0x35
                 .equ   MCUSR   = 0x34
                 .equ   SMCR    = 0x33
                 .equ   ACSR    = 0x30
                 .equ   SPDR    = 0x2e
                 .equ   SPSR    = 0x2d
                 .equ   SPCR    = 0x2c
                 .equ   GPIOR2  = 0x2b
                 .equ   GPIOR1  = 0x2a
                 .equ   OCR0B   = 0x28
                 .equ   OCR0A   = 0x27
                 .equ   TCNT0   = 0x26
                 .equ   TCCR0B  = 0x25
                 .equ   TCCR0A  = 0x24
                 .equ   GTCCR   = 0x23
                 .equ   EEARH   = 0x22
                 .equ   EEARL   = 0x21
                 .equ   EEDR    = 0x20
                 .equ   EECR    = 0x1f
                 .equ   GPIOR0  = 0x1e
                 .equ   EIMSK   = 0x1d
                 .equ   EIFR    = 0x1c
                 .equ   PCIFR   = 0x1b
                 .equ   TIFR2   = 0x17
                 .equ   TIFR1   = 0x16
                 .equ   TIFR0   = 0x15
                 .equ   PORTD   = 0x0b
                 .equ   DDRD    = 0x0a
                 .equ   PIND    = 0x09
                 .equ   PORTC   = 0x08
                 .equ   DDRC    = 0x07
                 .equ   PINC    = 0x06
                 .equ   PORTB   = 0x05
                 .equ   DDRB    = 0x04
                 .equ   PINB    = 0x03
                 
                 
                 ; ***** BIT DEFINITIONS **************************************************
                 
                 ; ***** USART0 ***********************
                 ; UDR0 - USART I/O Data Register
                 .equ   UDR0_0  = 0     ; USART I/O Data Register bit 0
                 .equ   UDR0_1  = 1     ; USART I/O Data Register bit 1
                 .equ   UDR0_2  = 2     ; USART I/O Data Register bit 2
                 .equ   UDR0_3  = 3     ; USART I/O Data Register bit 3
                 .equ   UDR0_4  = 4     ; USART I/O Data Register bit 4
                 .equ   UDR0_5  = 5     ; USART I/O Data Register bit 5
                 .equ   UDR0_6  = 6     ; USART I/O Data Register bit 6
                 .equ   UDR0_7  = 7     ; USART I/O Data Register bit 7
                 
                 ; UCSR0A - USART Control and Status Register A
                 .equ   MPCM0   = 0     ; Multi-processor Communication Mode
                 .equ   U2X0    = 1     ; Double the USART transmission speed
                 .equ   UPE0    = 2     ; Parity Error
                 .equ   DOR0    = 3     ; Data overRun
                 .equ   FE0     = 4     ; Framing Error
                 .equ   UDRE0   = 5     ; USART Data Register Empty
                 .equ   TXC0    = 6     ; USART Transmitt Complete
                 .equ   RXC0    = 7     ; USART Receive Complete
                 
                 ; UCSR0B - USART Control and Status Register B
                 .equ   TXB80   = 0     ; Transmit Data Bit 8
                 .equ   RXB80   = 1     ; Receive Data Bit 8
                 .equ   UCSZ02  = 2     ; Character Size
                 .equ   TXEN0   = 3     ; Transmitter Enable
                 .equ   RXEN0   = 4     ; Receiver Enable
                 .equ   UDRIE0  = 5     ; USART Data register Empty Interrupt Enable
                 .equ   TXCIE0  = 6     ; TX Complete Interrupt Enable
                 .equ   RXCIE0  = 7     ; RX Complete Interrupt Enable
                 
                 ; UCSR0C - USART Control and Status Register C
                 .equ   UCPOL0  = 0     ; Clock Polarity
                 .equ   UCSZ00  = 1     ; Character Size
                 .equ   UCPHA0  = UCSZ00        ; For compatibility
                 .equ   UCSZ01  = 2     ; Character Size
                 .equ   UDORD0  = UCSZ01        ; For compatibility
                 .equ   USBS0   = 3     ; Stop Bit Select
                 .equ   UPM00   = 4     ; Parity Mode Bit 0
                 .equ   UPM01   = 5     ; Parity Mode Bit 1
                 .equ   UMSEL00 = 6     ; USART Mode Select
                 .equ   UMSEL0  = UMSEL00       ; For compatibility
                 .equ   UMSEL01 = 7     ; USART Mode Select
                 .equ   UMSEL1  = UMSEL01       ; For compatibility
                 
                 ; UBRR0H - USART Baud Rate Register High Byte
                 .equ   UBRR8   = 0     ; USART Baud Rate Register bit 8
                 .equ   UBRR9   = 1     ; USART Baud Rate Register bit 9
                 .equ   UBRR10  = 2     ; USART Baud Rate Register bit 10
                 .equ   UBRR11  = 3     ; USART Baud Rate Register bit 11
                 
                 ; UBRR0L - USART Baud Rate Register Low Byte
                 .equ   _UBRR0  = 0     ; USART Baud Rate Register bit 0
                 .equ   _UBRR1  = 1     ; USART Baud Rate Register bit 1
                 .equ   UBRR2   = 2     ; USART Baud Rate Register bit 2
                 .equ   UBRR3   = 3     ; USART Baud Rate Register bit 3
                 .equ   UBRR4   = 4     ; USART Baud Rate Register bit 4
                 .equ   UBRR5   = 5     ; USART Baud Rate Register bit 5
                 .equ   UBRR6   = 6     ; USART Baud Rate Register bit 6
                 .equ   UBRR7   = 7     ; USART Baud Rate Register bit 7
                 
                 
                 ; ***** TWI **************************
                 ; TWAMR - TWI (Slave) Address Mask Register
                 .equ   TWAM0   = 1     ; 
                 .equ   TWAMR0  = TWAM0 ; For compatibility
                 .equ   TWAM1   = 2     ; 
                 .equ   TWAMR1  = TWAM1 ; For compatibility
                 .equ   TWAM2   = 3     ; 
                 .equ   TWAMR2  = TWAM2 ; For compatibility
                 .equ   TWAM3   = 4     ; 
                 .equ   TWAMR3  = TWAM3 ; For compatibility
                 .equ   TWAM4   = 5     ; 
                 .equ   TWAMR4  = TWAM4 ; For compatibility
                 .equ   TWAM5   = 6     ; 
                 .equ   TWAMR5  = TWAM5 ; For compatibility
                 .equ   TWAM6   = 7     ; 
                 .equ   TWAMR6  = TWAM6 ; For compatibility
                 
                 ; TWBR - TWI Bit Rate register
                 .equ   TWBR0   = 0     ; 
                 .equ   TWBR1   = 1     ; 
                 .equ   TWBR2   = 2     ; 
                 .equ   TWBR3   = 3     ; 
                 .equ   TWBR4   = 4     ; 
                 .equ   TWBR5   = 5     ; 
                 .equ   TWBR6   = 6     ; 
                 .equ   TWBR7   = 7     ; 
                 
                 ; TWCR - TWI Control Register
                 .equ   TWIE    = 0     ; TWI Interrupt Enable
                 .equ   TWEN    = 2     ; TWI Enable Bit
                 .equ   TWWC    = 3     ; TWI Write Collition Flag
                 .equ   TWSTO   = 4     ; TWI Stop Condition Bit
                 .equ   TWSTA   = 5     ; TWI Start Condition Bit
                 .equ   TWEA    = 6     ; TWI Enable Acknowledge Bit
                 .equ   TWINT   = 7     ; TWI Interrupt Flag
                 
                 ; TWSR - TWI Status Register
                 .equ   TWPS0   = 0     ; TWI Prescaler
                 .equ   TWPS1   = 1     ; TWI Prescaler
                 .equ   TWS3    = 3     ; TWI Status
                 .equ   TWS4    = 4     ; TWI Status
                 .equ   TWS5    = 5     ; TWI Status
                 .equ   TWS6    = 6     ; TWI Status
                 .equ   TWS7    = 7     ; TWI Status
                 
                 ; TWDR - TWI Data register
                 .equ   TWD0    = 0     ; TWI Data Register Bit 0
                 .equ   TWD1    = 1     ; TWI Data Register Bit 1
                 .equ   TWD2    = 2     ; TWI Data Register Bit 2
                 .equ   TWD3    = 3     ; TWI Data Register Bit 3
                 .equ   TWD4    = 4     ; TWI Data Register Bit 4
                 .equ   TWD5    = 5     ; TWI Data Register Bit 5
                 .equ   TWD6    = 6     ; TWI Data Register Bit 6
                 .equ   TWD7    = 7     ; TWI Data Register Bit 7
                 
                 ; TWAR - TWI (Slave) Address register
                 .equ   TWGCE   = 0     ; TWI General Call Recognition Enable Bit
                 .equ   TWA0    = 1     ; TWI (Slave) Address register Bit 0
                 .equ   TWA1    = 2     ; TWI (Slave) Address register Bit 1
                 .equ   TWA2    = 3     ; TWI (Slave) Address register Bit 2
                 .equ   TWA3    = 4     ; TWI (Slave) Address register Bit 3
                 .equ   TWA4    = 5     ; TWI (Slave) Address register Bit 4
                 .equ   TWA5    = 6     ; TWI (Slave) Address register Bit 5
                 .equ   TWA6    = 7     ; TWI (Slave) Address register Bit 6
                 
                 
                 ; ***** TIMER_COUNTER_1 **************
                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                 .equ   TOIE1   = 0     ; Timer/Counter1 Overflow Interrupt Enable
                 .equ   OCIE1A  = 1     ; Timer/Counter1 Output CompareA Match Interrupt Enable
                 .equ   OCIE1B  = 2     ; Timer/Counter1 Output CompareB Match Interrupt Enable
                 .equ   ICIE1   = 5     ; Timer/Counter1 Input Capture Interrupt Enable
                 
                 ; TIFR1 - Timer/Counter Interrupt Flag register
                 .equ   TOV1    = 0     ; Timer/Counter1 Overflow Flag
                 .equ   OCF1A   = 1     ; Output Compare Flag 1A
                 .equ   OCF1B   = 2     ; Output Compare Flag 1B
                 .equ   ICF1    = 5     ; Input Capture Flag 1
                 
                 ; TCCR1A - Timer/Counter1 Control Register A
                 .equ   WGM10   = 0     ; Waveform Generation Mode
                 .equ   WGM11   = 1     ; Waveform Generation Mode
                 .equ   COM1B0  = 4     ; Compare Output Mode 1B, bit 0
                 .equ   COM1B1  = 5     ; Compare Output Mode 1B, bit 1
                 .equ   COM1A0  = 6     ; Comparet Ouput Mode 1A, bit 0
                 .equ   COM1A1  = 7     ; Compare Output Mode 1A, bit 1
                 
                 ; TCCR1B - Timer/Counter1 Control Register B
                 .equ   CS10    = 0     ; Prescaler source of Timer/Counter 1
                 .equ   CS11    = 1     ; Prescaler source of Timer/Counter 1
                 .equ   CS12    = 2     ; Prescaler source of Timer/Counter 1
                 .equ   WGM12   = 3     ; Waveform Generation Mode
                 .equ   WGM13   = 4     ; Waveform Generation Mode
                 .equ   ICES1   = 6     ; Input Capture 1 Edge Select
                 .equ   ICNC1   = 7     ; Input Capture 1 Noise Canceler
                 
                 ; TCCR1C - Timer/Counter1 Control Register C
                 .equ   FOC1B   = 6     ; 
                 .equ   FOC1A   = 7     ; 
                 
                 ; GTCCR - General Timer/Counter Control Register
                 .equ   PSRSYNC = 0     ; Prescaler Reset Timer/Counter1 and Timer/Counter0
                 .equ   TSM     = 7     ; Timer/Counter Synchronization Mode
                 
                 
                 ; ***** TIMER_COUNTER_2 **************
                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                 .equ   TOIE2   = 0     ; Timer/Counter2 Overflow Interrupt Enable
                 .equ   TOIE2A  = TOIE2 ; For compatibility
                 .equ   OCIE2A  = 1     ; Timer/Counter2 Output Compare Match A Interrupt Enable
                 .equ   OCIE2B  = 2     ; Timer/Counter2 Output Compare Match B Interrupt Enable
                 
                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                 .equ   TOV2    = 0     ; Timer/Counter2 Overflow Flag
                 .equ   OCF2A   = 1     ; Output Compare Flag 2A
                 .equ   OCF2B   = 2     ; Output Compare Flag 2B
                 
                 ; TCCR2A - Timer/Counter2 Control Register A
                 .equ   WGM20   = 0     ; Waveform Genration Mode
                 .equ   WGM21   = 1     ; Waveform Genration Mode
                 .equ   COM2B0  = 4     ; Compare Output Mode bit 0
                 .equ   COM2B1  = 5     ; Compare Output Mode bit 1
                 .equ   COM2A0  = 6     ; Compare Output Mode bit 1
                 .equ   COM2A1  = 7     ; Compare Output Mode bit 1
                 
                 ; TCCR2B - Timer/Counter2 Control Register B
                 .equ   CS20    = 0     ; Clock Select bit 0
                 .equ   CS21    = 1     ; Clock Select bit 1
                 .equ   CS22    = 2     ; Clock Select bit 2
                 .equ   WGM22   = 3     ; Waveform Generation Mode
                 .equ   FOC2B   = 6     ; Force Output Compare B
                 .equ   FOC2A   = 7     ; Force Output Compare A
                 
                 ; TCNT2 - Timer/Counter2
                 .equ   TCNT2_0 = 0     ; Timer/Counter 2 bit 0
                 .equ   TCNT2_1 = 1     ; Timer/Counter 2 bit 1
                 .equ   TCNT2_2 = 2     ; Timer/Counter 2 bit 2
                 .equ   TCNT2_3 = 3     ; Timer/Counter 2 bit 3
                 .equ   TCNT2_4 = 4     ; Timer/Counter 2 bit 4
                 .equ   TCNT2_5 = 5     ; Timer/Counter 2 bit 5
                 .equ   TCNT2_6 = 6     ; Timer/Counter 2 bit 6
                 .equ   TCNT2_7 = 7     ; Timer/Counter 2 bit 7
                 
                 ; OCR2A - Timer/Counter2 Output Compare Register A
                 .equ   OCR2A_0 = 0     ; Timer/Counter2 Output Compare Register Bit 0
                 .equ   OCR2A_1 = 1     ; Timer/Counter2 Output Compare Register Bit 1
                 .equ   OCR2A_2 = 2     ; Timer/Counter2 Output Compare Register Bit 2
                 .equ   OCR2A_3 = 3     ; Timer/Counter2 Output Compare Register Bit 3
                 .equ   OCR2A_4 = 4     ; Timer/Counter2 Output Compare Register Bit 4
                 .equ   OCR2A_5 = 5     ; Timer/Counter2 Output Compare Register Bit 5
                 .equ   OCR2A_6 = 6     ; Timer/Counter2 Output Compare Register Bit 6
                 .equ   OCR2A_7 = 7     ; Timer/Counter2 Output Compare Register Bit 7
                 
                 ; OCR2B - Timer/Counter2 Output Compare Register B
                 .equ   OCR2B_0 = 0     ; Timer/Counter2 Output Compare Register Bit 0
                 .equ   OCR2B_1 = 1     ; Timer/Counter2 Output Compare Register Bit 1
                 .equ   OCR2B_2 = 2     ; Timer/Counter2 Output Compare Register Bit 2
                 .equ   OCR2B_3 = 3     ; Timer/Counter2 Output Compare Register Bit 3
                 .equ   OCR2B_4 = 4     ; Timer/Counter2 Output Compare Register Bit 4
                 .equ   OCR2B_5 = 5     ; Timer/Counter2 Output Compare Register Bit 5
                 .equ   OCR2B_6 = 6     ; Timer/Counter2 Output Compare Register Bit 6
                 .equ   OCR2B_7 = 7     ; Timer/Counter2 Output Compare Register Bit 7
                 
                 ; ASSR - Asynchronous Status Register
                 .equ   TCR2BUB = 0     ; Timer/Counter Control Register2 Update Busy
                 .equ   TCR2AUB = 1     ; Timer/Counter Control Register2 Update Busy
                 .equ   OCR2BUB = 2     ; Output Compare Register 2 Update Busy
                 .equ   OCR2AUB = 3     ; Output Compare Register2 Update Busy
                 .equ   TCN2UB  = 4     ; Timer/Counter2 Update Busy
                 .equ   AS2     = 5     ; Asynchronous Timer/Counter2
                 .equ   EXCLK   = 6     ; Enable External Clock Input
                 
                 ; GTCCR - General Timer Counter Control register
                 .equ   PSRASY  = 1     ; Prescaler Reset Timer/Counter2
                 .equ   PSR2    = PSRASY        ; For compatibility
                 ;.equ  TSM     = 7     ; Timer/Counter Synchronization Mode
                 
                 
                 ; ***** AD_CONVERTER *****************
                 ; ADMUX - The ADC multiplexer Selection Register
                 .equ   MUX0    = 0     ; Analog Channel and Gain Selection Bits
                 .equ   MUX1    = 1     ; Analog Channel and Gain Selection Bits
                 .equ   MUX2    = 2     ; Analog Channel and Gain Selection Bits
                 .equ   MUX3    = 3     ; Analog Channel and Gain Selection Bits
                 .equ   ADLAR   = 5     ; Left Adjust Result
                 .equ   REFS0   = 6     ; Reference Selection Bit 0
                 .equ   REFS1   = 7     ; Reference Selection Bit 1
                 
                 ; ADCSRA - The ADC Control and Status register A
                 .equ   ADPS0   = 0     ; ADC  Prescaler Select Bits
                 .equ   ADPS1   = 1     ; ADC  Prescaler Select Bits
                 .equ   ADPS2   = 2     ; ADC  Prescaler Select Bits
                 .equ   ADIE    = 3     ; ADC Interrupt Enable
                 .equ   ADIF    = 4     ; ADC Interrupt Flag
                 .equ   ADATE   = 5     ; ADC  Auto Trigger Enable
                 .equ   ADSC    = 6     ; ADC Start Conversion
                 .equ   ADEN    = 7     ; ADC Enable
                 
                 ; ADCSRB - The ADC Control and Status register B
                 .equ   ADTS0   = 0     ; ADC Auto Trigger Source bit 0
                 .equ   ADTS1   = 1     ; ADC Auto Trigger Source bit 1
                 .equ   ADTS2   = 2     ; ADC Auto Trigger Source bit 2
                 .equ   ACME    = 6     ; 
                 
                 ; ADCH - ADC Data Register High Byte
                 .equ   ADCH0   = 0     ; ADC Data Register High Byte Bit 0
                 .equ   ADCH1   = 1     ; ADC Data Register High Byte Bit 1
                 .equ   ADCH2   = 2     ; ADC Data Register High Byte Bit 2
                 .equ   ADCH3   = 3     ; ADC Data Register High Byte Bit 3
                 .equ   ADCH4   = 4     ; ADC Data Register High Byte Bit 4
                 .equ   ADCH5   = 5     ; ADC Data Register High Byte Bit 5
                 .equ   ADCH6   = 6     ; ADC Data Register High Byte Bit 6
                 .equ   ADCH7   = 7     ; ADC Data Register High Byte Bit 7
                 
                 ; ADCL - ADC Data Register Low Byte
                 .equ   ADCL0   = 0     ; ADC Data Register Low Byte Bit 0
                 .equ   ADCL1   = 1     ; ADC Data Register Low Byte Bit 1
                 .equ   ADCL2   = 2     ; ADC Data Register Low Byte Bit 2
                 .equ   ADCL3   = 3     ; ADC Data Register Low Byte Bit 3
                 .equ   ADCL4   = 4     ; ADC Data Register Low Byte Bit 4
                 .equ   ADCL5   = 5     ; ADC Data Register Low Byte Bit 5
                 .equ   ADCL6   = 6     ; ADC Data Register Low Byte Bit 6
                 .equ   ADCL7   = 7     ; ADC Data Register Low Byte Bit 7
                 
                 ; DIDR0 - Digital Input Disable Register
                 .equ   ADC0D   = 0     ; 
                 .equ   ADC1D   = 1     ; 
                 .equ   ADC2D   = 2     ; 
                 .equ   ADC3D   = 3     ; 
                 .equ   ADC4D   = 4     ; 
                 .equ   ADC5D   = 5     ; 
                 
                 
                 ; ***** ANALOG_COMPARATOR ************
                 ; ACSR - Analog Comparator Control And Status Register
                 .equ   ACIS0   = 0     ; Analog Comparator Interrupt Mode Select bit 0
                 .equ   ACIS1   = 1     ; Analog Comparator Interrupt Mode Select bit 1
                 .equ   ACIC    = 2     ; Analog Comparator Input Capture Enable
                 .equ   ACIE    = 3     ; Analog Comparator Interrupt Enable
                 .equ   ACI     = 4     ; Analog Comparator Interrupt Flag
                 .equ   ACO     = 5     ; Analog Compare Output
                 .equ   ACBG    = 6     ; Analog Comparator Bandgap Select
                 .equ   ACD     = 7     ; Analog Comparator Disable
                 
                 ; DIDR1 - Digital Input Disable Register 1
                 .equ   AIN0D   = 0     ; AIN0 Digital Input Disable
                 .equ   AIN1D   = 1     ; AIN1 Digital Input Disable
                 
                 
                 ; ***** PORTB ************************
                 ; PORTB - Port B Data Register
                 .equ   PORTB0  = 0     ; Port B Data Register bit 0
                 .equ   PB0     = 0     ; For compatibility
                 .equ   PORTB1  = 1     ; Port B Data Register bit 1
                 .equ   PB1     = 1     ; For compatibility
                 .equ   PORTB2  = 2     ; Port B Data Register bit 2
                 .equ   PB2     = 2     ; For compatibility
                 .equ   PORTB3  = 3     ; Port B Data Register bit 3
                 .equ   PB3     = 3     ; For compatibility
                 .equ   PORTB4  = 4     ; Port B Data Register bit 4
                 .equ   PB4     = 4     ; For compatibility
                 .equ   PORTB5  = 5     ; Port B Data Register bit 5
                 .equ   PB5     = 5     ; For compatibility
                 .equ   PORTB6  = 6     ; Port B Data Register bit 6
                 .equ   PB6     = 6     ; For compatibility
                 .equ   PORTB7  = 7     ; Port B Data Register bit 7
                 .equ   PB7     = 7     ; For compatibility
                 
                 ; DDRB - Port B Data Direction Register
                 .equ   DDB0    = 0     ; Port B Data Direction Register bit 0
                 .equ   DDB1    = 1     ; Port B Data Direction Register bit 1
                 .equ   DDB2    = 2     ; Port B Data Direction Register bit 2
                 .equ   DDB3    = 3     ; Port B Data Direction Register bit 3
                 .equ   DDB4    = 4     ; Port B Data Direction Register bit 4
                 .equ   DDB5    = 5     ; Port B Data Direction Register bit 5
                 .equ   DDB6    = 6     ; Port B Data Direction Register bit 6
                 .equ   DDB7    = 7     ; Port B Data Direction Register bit 7
                 
                 ; PINB - Port B Input Pins
                 .equ   PINB0   = 0     ; Port B Input Pins bit 0
                 .equ   PINB1   = 1     ; Port B Input Pins bit 1
                 .equ   PINB2   = 2     ; Port B Input Pins bit 2
                 .equ   PINB3   = 3     ; Port B Input Pins bit 3
                 .equ   PINB4   = 4     ; Port B Input Pins bit 4
                 .equ   PINB5   = 5     ; Port B Input Pins bit 5
                 .equ   PINB6   = 6     ; Port B Input Pins bit 6
                 .equ   PINB7   = 7     ; Port B Input Pins bit 7
                 
                 
                 ; ***** PORTC ************************
                 ; PORTC - Port C Data Register
                 .equ   PORTC0  = 0     ; Port C Data Register bit 0
                 .equ   PC0     = 0     ; For compatibility
                 .equ   PORTC1  = 1     ; Port C Data Register bit 1
                 .equ   PC1     = 1     ; For compatibility
                 .equ   PORTC2  = 2     ; Port C Data Register bit 2
                 .equ   PC2     = 2     ; For compatibility
                 .equ   PORTC3  = 3     ; Port C Data Register bit 3
                 .equ   PC3     = 3     ; For compatibility
                 .equ   PORTC4  = 4     ; Port C Data Register bit 4
                 .equ   PC4     = 4     ; For compatibility
                 .equ   PORTC5  = 5     ; Port C Data Register bit 5
                 .equ   PC5     = 5     ; For compatibility
                 .equ   PORTC6  = 6     ; Port C Data Register bit 6
                 .equ   PC6     = 6     ; For compatibility
                 
                 ; DDRC - Port C Data Direction Register
                 .equ   DDC0    = 0     ; Port C Data Direction Register bit 0
                 .equ   DDC1    = 1     ; Port C Data Direction Register bit 1
                 .equ   DDC2    = 2     ; Port C Data Direction Register bit 2
                 .equ   DDC3    = 3     ; Port C Data Direction Register bit 3
                 .equ   DDC4    = 4     ; Port C Data Direction Register bit 4
                 .equ   DDC5    = 5     ; Port C Data Direction Register bit 5
                 .equ   DDC6    = 6     ; Port C Data Direction Register bit 6
                 
                 ; PINC - Port C Input Pins
                 .equ   PINC0   = 0     ; Port C Input Pins bit 0
                 .equ   PINC1   = 1     ; Port C Input Pins bit 1
                 .equ   PINC2   = 2     ; Port C Input Pins bit 2
                 .equ   PINC3   = 3     ; Port C Input Pins bit 3
                 .equ   PINC4   = 4     ; Port C Input Pins bit 4
                 .equ   PINC5   = 5     ; Port C Input Pins bit 5
                 .equ   PINC6   = 6     ; Port C Input Pins bit 6
                 
                 
                 ; ***** PORTD ************************
                 ; PORTD - Port D Data Register
                 .equ   PORTD0  = 0     ; Port D Data Register bit 0
                 .equ   PD0     = 0     ; For compatibility
                 .equ   PORTD1  = 1     ; Port D Data Register bit 1
                 .equ   PD1     = 1     ; For compatibility
                 .equ   PORTD2  = 2     ; Port D Data Register bit 2
                 .equ   PD2     = 2     ; For compatibility
                 .equ   PORTD3  = 3     ; Port D Data Register bit 3
                 .equ   PD3     = 3     ; For compatibility
                 .equ   PORTD4  = 4     ; Port D Data Register bit 4
                 .equ   PD4     = 4     ; For compatibility
                 .equ   PORTD5  = 5     ; Port D Data Register bit 5
                 .equ   PD5     = 5     ; For compatibility
                 .equ   PORTD6  = 6     ; Port D Data Register bit 6
                 .equ   PD6     = 6     ; For compatibility
                 .equ   PORTD7  = 7     ; Port D Data Register bit 7
                 .equ   PD7     = 7     ; For compatibility
                 
                 ; DDRD - Port D Data Direction Register
                 .equ   DDD0    = 0     ; Port D Data Direction Register bit 0
                 .equ   DDD1    = 1     ; Port D Data Direction Register bit 1
                 .equ   DDD2    = 2     ; Port D Data Direction Register bit 2
                 .equ   DDD3    = 3     ; Port D Data Direction Register bit 3
                 .equ   DDD4    = 4     ; Port D Data Direction Register bit 4
                 .equ   DDD5    = 5     ; Port D Data Direction Register bit 5
                 .equ   DDD6    = 6     ; Port D Data Direction Register bit 6
                 .equ   DDD7    = 7     ; Port D Data Direction Register bit 7
                 
                 ; PIND - Port D Input Pins
                 .equ   PIND0   = 0     ; Port D Input Pins bit 0
                 .equ   PIND1   = 1     ; Port D Input Pins bit 1
                 .equ   PIND2   = 2     ; Port D Input Pins bit 2
                 .equ   PIND3   = 3     ; Port D Input Pins bit 3
                 .equ   PIND4   = 4     ; Port D Input Pins bit 4
                 .equ   PIND5   = 5     ; Port D Input Pins bit 5
                 .equ   PIND6   = 6     ; Port D Input Pins bit 6
                 .equ   PIND7   = 7     ; Port D Input Pins bit 7
                 
                 
                 ; ***** TIMER_COUNTER_0 **************
                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                 .equ   TOIE0   = 0     ; Timer/Counter0 Overflow Interrupt Enable
                 .equ   OCIE0A  = 1     ; Timer/Counter0 Output Compare Match A Interrupt Enable
                 .equ   OCIE0B  = 2     ; Timer/Counter0 Output Compare Match B Interrupt Enable
                 
                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                 .equ   TOV0    = 0     ; Timer/Counter0 Overflow Flag
                 .equ   OCF0A   = 1     ; Timer/Counter0 Output Compare Flag 0A
                 .equ   OCF0B   = 2     ; Timer/Counter0 Output Compare Flag 0B
                 
                 ; TCCR0A - Timer/Counter  Control Register A
                 .equ   WGM00   = 0     ; Waveform Generation Mode
                 .equ   WGM01   = 1     ; Waveform Generation Mode
                 .equ   COM0B0  = 4     ; Compare Output Mode, Fast PWm
                 .equ   COM0B1  = 5     ; Compare Output Mode, Fast PWm
                 .equ   COM0A0  = 6     ; Compare Output Mode, Phase Correct PWM Mode
                 .equ   COM0A1  = 7     ; Compare Output Mode, Phase Correct PWM Mode
                 
                 ; TCCR0B - Timer/Counter Control Register B
                 .equ   CS00    = 0     ; Clock Select
                 .equ   CS01    = 1     ; Clock Select
                 .equ   CS02    = 2     ; Clock Select
                 .equ   WGM02   = 3     ; 
                 .equ   FOC0B   = 6     ; Force Output Compare B
                 .equ   FOC0A   = 7     ; Force Output Compare A
                 
                 ; TCNT0 - Timer/Counter0
                 .equ   TCNT0_0 = 0     ; 
                 .equ   TCNT0_1 = 1     ; 
                 .equ   TCNT0_2 = 2     ; 
                 .equ   TCNT0_3 = 3     ; 
                 .equ   TCNT0_4 = 4     ; 
                 .equ   TCNT0_5 = 5     ; 
                 .equ   TCNT0_6 = 6     ; 
                 .equ   TCNT0_7 = 7     ; 
                 
                 ; OCR0A - Timer/Counter0 Output Compare Register
                 .equ   OCR0A_0 = 0     ; 
                 .equ   OCR0A_1 = 1     ; 
                 .equ   OCR0A_2 = 2     ; 
                 .equ   OCR0A_3 = 3     ; 
                 .equ   OCR0A_4 = 4     ; 
                 .equ   OCR0A_5 = 5     ; 
                 .equ   OCR0A_6 = 6     ; 
                 .equ   OCR0A_7 = 7     ; 
                 
                 ; OCR0B - Timer/Counter0 Output Compare Register
                 .equ   OCR0B_0 = 0     ; 
                 .equ   OCR0B_1 = 1     ; 
                 .equ   OCR0B_2 = 2     ; 
                 .equ   OCR0B_3 = 3     ; 
                 .equ   OCR0B_4 = 4     ; 
                 .equ   OCR0B_5 = 5     ; 
                 .equ   OCR0B_6 = 6     ; 
                 .equ   OCR0B_7 = 7     ; 
                 
                 ; GTCCR - General Timer/Counter Control Register
                 ;.equ  PSRSYNC = 0     ; Prescaler Reset Timer/Counter1 and Timer/Counter0
                 .equ   PSR10   = PSRSYNC       ; For compatibility
                 ;.equ  TSM     = 7     ; Timer/Counter Synchronization Mode
                 
                 
                 ; ***** EXTERNAL_INTERRUPT ***********
                 ; EICRA - External Interrupt Control Register
                 .equ   ISC00   = 0     ; External Interrupt Sense Control 0 Bit 0
                 .equ   ISC01   = 1     ; External Interrupt Sense Control 0 Bit 1
                 .equ   ISC10   = 2     ; External Interrupt Sense Control 1 Bit 0
                 .equ   ISC11   = 3     ; External Interrupt Sense Control 1 Bit 1
                 
                 ; EIMSK - External Interrupt Mask Register
                 .equ   INT0    = 0     ; External Interrupt Request 0 Enable
                 .equ   INT1    = 1     ; External Interrupt Request 1 Enable
                 
                 ; EIFR - External Interrupt Flag Register
                 .equ   INTF0   = 0     ; External Interrupt Flag 0
                 .equ   INTF1   = 1     ; External Interrupt Flag 1
                 
                 ; PCICR - Pin Change Interrupt Control Register
                 .equ   PCIE0   = 0     ; Pin Change Interrupt Enable 0
                 .equ   PCIE1   = 1     ; Pin Change Interrupt Enable 1
                 .equ   PCIE2   = 2     ; Pin Change Interrupt Enable 2
                 
                 ; PCMSK2 - Pin Change Mask Register 2
                 .equ   PCINT16 = 0     ; Pin Change Enable Mask 16
                 .equ   PCINT17 = 1     ; Pin Change Enable Mask 17
                 .equ   PCINT18 = 2     ; Pin Change Enable Mask 18
                 .equ   PCINT19 = 3     ; Pin Change Enable Mask 19
                 .equ   PCINT20 = 4     ; Pin Change Enable Mask 20
                 .equ   PCINT21 = 5     ; Pin Change Enable Mask 21
                 .equ   PCINT22 = 6     ; Pin Change Enable Mask 22
                 .equ   PCINT23 = 7     ; Pin Change Enable Mask 23
                 
                 ; PCMSK1 - Pin Change Mask Register 1
                 .equ   PCINT8  = 0     ; Pin Change Enable Mask 8
                 .equ   PCINT9  = 1     ; Pin Change Enable Mask 9
                 .equ   PCINT10 = 2     ; Pin Change Enable Mask 10
                 .equ   PCINT11 = 3     ; Pin Change Enable Mask 11
                 .equ   PCINT12 = 4     ; Pin Change Enable Mask 12
                 .equ   PCINT13 = 5     ; Pin Change Enable Mask 13
                 .equ   PCINT14 = 6     ; Pin Change Enable Mask 14
                 
                 ; PCMSK0 - Pin Change Mask Register 0
                 .equ   PCINT0  = 0     ; Pin Change Enable Mask 0
                 .equ   PCINT1  = 1     ; Pin Change Enable Mask 1
                 .equ   PCINT2  = 2     ; Pin Change Enable Mask 2
                 .equ   PCINT3  = 3     ; Pin Change Enable Mask 3
                 .equ   PCINT4  = 4     ; Pin Change Enable Mask 4
                 .equ   PCINT5  = 5     ; Pin Change Enable Mask 5
                 .equ   PCINT6  = 6     ; Pin Change Enable Mask 6
                 .equ   PCINT7  = 7     ; Pin Change Enable Mask 7
                 
                 ; PCIFR - Pin Change Interrupt Flag Register
                 .equ   PCIF0   = 0     ; Pin Change Interrupt Flag 0
                 .equ   PCIF1   = 1     ; Pin Change Interrupt Flag 1
                 .equ   PCIF2   = 2     ; Pin Change Interrupt Flag 2
                 
                 
                 ; ***** SPI **************************
                 ; SPDR - SPI Data Register
                 .equ   SPDR0   = 0     ; SPI Data Register bit 0
                 .equ   SPDR1   = 1     ; SPI Data Register bit 1
                 .equ   SPDR2   = 2     ; SPI Data Register bit 2
                 .equ   SPDR3   = 3     ; SPI Data Register bit 3
                 .equ   SPDR4   = 4     ; SPI Data Register bit 4
                 .equ   SPDR5   = 5     ; SPI Data Register bit 5
                 .equ   SPDR6   = 6     ; SPI Data Register bit 6
                 .equ   SPDR7   = 7     ; SPI Data Register bit 7
                 
                 ; SPSR - SPI Status Register
                 .equ   SPI2X   = 0     ; Double SPI Speed Bit
                 .equ   WCOL    = 6     ; Write Collision Flag
                 .equ   SPIF    = 7     ; SPI Interrupt Flag
                 
                 ; SPCR - SPI Control Register
                 .equ   SPR0    = 0     ; SPI Clock Rate Select 0
                 .equ   SPR1    = 1     ; SPI Clock Rate Select 1
                 .equ   CPHA    = 2     ; Clock Phase
                 .equ   CPOL    = 3     ; Clock polarity
                 .equ   MSTR    = 4     ; Master/Slave Select
                 .equ   DORD    = 5     ; Data Order
                 .equ   SPE     = 6     ; SPI Enable
                 .equ   SPIE    = 7     ; SPI Interrupt Enable
                 
                 
                 ; ***** CPU **************************
                 ; SREG - Status Register
                 .equ   SREG_C  = 0     ; Carry Flag
                 .equ   SREG_Z  = 1     ; Zero Flag
                 .equ   SREG_N  = 2     ; Negative Flag
                 .equ   SREG_V  = 3     ; Two's Complement Overflow Flag
                 .equ   SREG_S  = 4     ; Sign Bit
                 .equ   SREG_H  = 5     ; Half Carry Flag
                 .equ   SREG_T  = 6     ; Bit Copy Storage
                 .equ   SREG_I  = 7     ; Global Interrupt Enable
                 
                 ; OSCCAL - Oscillator Calibration Value
                 .equ   CAL0    = 0     ; Oscillator Calibration Value Bit0
                 .equ   CAL1    = 1     ; Oscillator Calibration Value Bit1
                 .equ   CAL2    = 2     ; Oscillator Calibration Value Bit2
                 .equ   CAL3    = 3     ; Oscillator Calibration Value Bit3
                 .equ   CAL4    = 4     ; Oscillator Calibration Value Bit4
                 .equ   CAL5    = 5     ; Oscillator Calibration Value Bit5
                 .equ   CAL6    = 6     ; Oscillator Calibration Value Bit6
                 .equ   CAL7    = 7     ; Oscillator Calibration Value Bit7
                 
                 ; CLKPR - Clock Prescale Register
                 .equ   CLKPS0  = 0     ; Clock Prescaler Select Bit 0
                 .equ   CLKPS1  = 1     ; Clock Prescaler Select Bit 1
                 .equ   CLKPS2  = 2     ; Clock Prescaler Select Bit 2
                 .equ   CLKPS3  = 3     ; Clock Prescaler Select Bit 3
                 .equ   CLKPCE  = 7     ; Clock Prescaler Change Enable
                 
                 ; SPMCSR - Store Program Memory Control and Status Register
                 .equ   SELFPRGEN       = 0     ; Self Programming Enable
                 .equ   PGERS   = 1     ; Page Erase
                 .equ   PGWRT   = 2     ; Page Write
                 .equ   BLBSET  = 3     ; Boot Lock Bit Set
                 .equ   RWWSRE  = 4     ; Read-While-Write section read enable
                 .equ   RWWSB   = 6     ; Read-While-Write Section Busy
                 .equ   SPMIE   = 7     ; SPM Interrupt Enable
                 
                 ; MCUCR - MCU Control Register
                 .equ   IVCE    = 0     ; 
                 .equ   IVSEL   = 1     ; 
                 .equ   PUD     = 4     ; 
                 
                 ; MCUSR - MCU Status Register
                 .equ   PORF    = 0     ; Power-on reset flag
                 .equ   EXTRF   = 1     ; External Reset Flag
                 .equ   EXTREF  = EXTRF ; For compatibility
                 .equ   BORF    = 2     ; Brown-out Reset Flag
                 .equ   WDRF    = 3     ; Watchdog Reset Flag
                 
                 ; SMCR - 
                 .equ   SE      = 0     ; 
                 .equ   SM0     = 1     ; 
                 .equ   SM1     = 2     ; 
                 .equ   SM2     = 3     ; 
                 
                 ; GPIOR2 - General Purpose I/O Register 2
                 .equ   GPIOR20 = 0     ; 
                 .equ   GPIOR21 = 1     ; 
                 .equ   GPIOR22 = 2     ; 
                 .equ   GPIOR23 = 3     ; 
                 .equ   GPIOR24 = 4     ; 
                 .equ   GPIOR25 = 5     ; 
                 .equ   GPIOR26 = 6     ; 
                 .equ   GPIOR27 = 7     ; 
                 
                 ; GPIOR1 - General Purpose I/O Register 1
                 .equ   GPIOR10 = 0     ; 
                 .equ   GPIOR11 = 1     ; 
                 .equ   GPIOR12 = 2     ; 
                 .equ   GPIOR13 = 3     ; 
                 .equ   GPIOR14 = 4     ; 
                 .equ   GPIOR15 = 5     ; 
                 .equ   GPIOR16 = 6     ; 
                 .equ   GPIOR17 = 7     ; 
                 
                 ; GPIOR0 - General Purpose I/O Register 0
                 .equ   GPIOR00 = 0     ; 
                 .equ   GPIOR01 = 1     ; 
                 .equ   GPIOR02 = 2     ; 
                 .equ   GPIOR03 = 3     ; 
                 .equ   GPIOR04 = 4     ; 
                 .equ   GPIOR05 = 5     ; 
                 .equ   GPIOR06 = 6     ; 
                 .equ   GPIOR07 = 7     ; 
                 
                 ; PRR - Power Reduction Register
                 .equ   PRADC   = 0     ; Power Reduction ADC
                 .equ   PRUSART0        = 1     ; Power Reduction USART
                 .equ   PRSPI   = 2     ; Power Reduction Serial Peripheral Interface
                 .equ   PRTIM1  = 3     ; Power Reduction Timer/Counter1
                 .equ   PRTIM0  = 5     ; Power Reduction Timer/Counter0
                 .equ   PRTIM2  = 6     ; Power Reduction Timer/Counter2
                 .equ   PRTWI   = 7     ; Power Reduction TWI
                 
                 
                 ; ***** WATCHDOG *********************
                 ; WDTCSR - Watchdog Timer Control Register
                 .equ   WDP0    = 0     ; Watch Dog Timer Prescaler bit 0
                 .equ   WDP1    = 1     ; Watch Dog Timer Prescaler bit 1
                 .equ   WDP2    = 2     ; Watch Dog Timer Prescaler bit 2
                 .equ   WDE     = 3     ; Watch Dog Enable
                 .equ   WDCE    = 4     ; Watchdog Change Enable
                 .equ   WDP3    = 5     ; Watchdog Timer Prescaler Bit 3
                 .equ   WDIE    = 6     ; Watchdog Timeout Interrupt Enable
                 .equ   WDIF    = 7     ; Watchdog Timeout Interrupt Flag
                 
                 
                 ; ***** EEPROM ***********************
                 ; EEARL - EEPROM Address Register Low Byte
                 .equ   EEAR0   = 0     ; EEPROM Read/Write Access Bit 0
                 .equ   EEAR1   = 1     ; EEPROM Read/Write Access Bit 1
                 .equ   EEAR2   = 2     ; EEPROM Read/Write Access Bit 2
                 .equ   EEAR3   = 3     ; EEPROM Read/Write Access Bit 3
                 .equ   EEAR4   = 4     ; EEPROM Read/Write Access Bit 4
                 .equ   EEAR5   = 5     ; EEPROM Read/Write Access Bit 5
                 .equ   EEAR6   = 6     ; EEPROM Read/Write Access Bit 6
                 .equ   EEAR7   = 7     ; EEPROM Read/Write Access Bit 7
                 
                 ; EEARH - EEPROM Address Register High Byte
                 .equ   EEAR8   = 0     ; EEPROM Read/Write Access Bit 0
                 
                 ; EEDR - EEPROM Data Register
                 .equ   EEDR0   = 0     ; EEPROM Data Register bit 0
                 .equ   EEDR1   = 1     ; EEPROM Data Register bit 1
                 .equ   EEDR2   = 2     ; EEPROM Data Register bit 2
                 .equ   EEDR3   = 3     ; EEPROM Data Register bit 3
                 .equ   EEDR4   = 4     ; EEPROM Data Register bit 4
                 .equ   EEDR5   = 5     ; EEPROM Data Register bit 5
                 .equ   EEDR6   = 6     ; EEPROM Data Register bit 6
                 .equ   EEDR7   = 7     ; EEPROM Data Register bit 7
                 
                 ; EECR - EEPROM Control Register
                 .equ   EERE    = 0     ; EEPROM Read Enable
                 .equ   EEPE    = 1     ; EEPROM Write Enable
                 .equ   EEMPE   = 2     ; EEPROM Master Write Enable
                 .equ   EERIE   = 3     ; EEPROM Ready Interrupt Enable
                 .equ   EEPM0   = 4     ; EEPROM Programming Mode Bit 0
                 .equ   EEPM1   = 5     ; EEPROM Programming Mode Bit 1
                 
                 
                 
                 ; ***** LOCKSBITS ********************************************************
                 .equ   LB1     = 0     ; Lock bit
                 .equ   LB2     = 1     ; Lock bit
                 .equ   BLB01   = 2     ; Boot Lock bit
                 .equ   BLB02   = 3     ; Boot Lock bit
                 .equ   BLB11   = 4     ; Boot lock bit
                 .equ   BLB12   = 5     ; Boot lock bit
                 
                 
                 ; ***** FUSES ************************************************************
                 ; LOW fuse bits
                 .equ   CKSEL0  = 0     ; Select Clock Source
                 .equ   CKSEL1  = 1     ; Select Clock Source
                 .equ   CKSEL2  = 2     ; Select Clock Source
                 .equ   CKSEL3  = 3     ; Select Clock Source
                 .equ   SUT0    = 4     ; Select start-up time
                 .equ   SUT1    = 5     ; Select start-up time
                 .equ   CKOUT   = 6     ; Clock output
                 .equ   CKDIV8  = 7     ; Divide clock by 8
                 
                 ; HIGH fuse bits
                 .equ   BODLEVEL0       = 0     ; Brown-out Detector trigger level
                 .equ   BODLEVEL1       = 1     ; Brown-out Detector trigger level
                 .equ   BODLEVEL2       = 2     ; Brown-out Detector trigger level
                 .equ   EESAVE  = 3     ; EEPROM memory is preserved through chip erase
                 .equ   WDTON   = 4     ; Watchdog Timer Always On
                 .equ   SPIEN   = 5     ; Enable Serial programming and Data Downloading
                 .equ   DWEN    = 6     ; debugWIRE Enable
                 .equ   RSTDISBL        = 7     ; External reset disable
                 
                 ; EXTENDED fuse bits
                 .equ   BOOTRST = 0     ; Select reset vector
                 .equ   BOOTSZ0 = 1     ; Select boot size
                 .equ   BOOTSZ1 = 2     ; Select boot size
                 
                 
                 
                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                 .def   XH      = r27
                 .def   XL      = r26
                 .def   YH      = r29
                 .def   YL      = r28
                 .def   ZH      = r31
                 .def   ZL      = r30
                 
                 
                 
                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                 .equ   FLASHEND        = 0x0fff        ; Note: Word address
                 .equ   IOEND   = 0x00ff
                 .equ   SRAM_START      = 0x0100
                 .equ   SRAM_SIZE       = 1024
                 .equ   RAMEND  = 0x04ff
                 .equ   XRAMEND = 0x0000
                 .equ   E2END   = 0x01ff
                 .equ   EEPROMEND       = 0x01ff
                 .equ   EEADRBITS       = 9
                 #pragma AVRPART MEMORY PROG_FLASH 8192
                 #pragma AVRPART MEMORY EEPROM 512
                 #pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 
                 
                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                 .equ   NRWW_START_ADDR = 0xc00
                 .equ   NRWW_STOP_ADDR  = 0xfff
                 .equ   RWW_START_ADDR  = 0x0
                 .equ   RWW_STOP_ADDR   = 0xbff
                 .equ   PAGESIZE        = 32
                 .equ   FIRSTBOOTSTART  = 0xf80
                 .equ   SECONDBOOTSTART = 0xf00
                 .equ   THIRDBOOTSTART  = 0xe00
                 .equ   FOURTHBOOTSTART = 0xc00
                 .equ   SMALLBOOTSTART  = FIRSTBOOTSTART
                 .equ   LARGEBOOTSTART  = FOURTHBOOTSTART
                 
                 
                 
                 ; ***** INTERRUPT VECTORS ************************************************
                 .equ   INT0addr        = 0x0001        ; External Interrupt Request 0
                 .equ   INT1addr        = 0x0002        ; External Interrupt Request 1
                 .equ   PCI0addr        = 0x0003        ; Pin Change Interrupt Request 0
                 .equ   PCI1addr        = 0x0004        ; Pin Change Interrupt Request 0
                 .equ   PCI2addr        = 0x0005        ; Pin Change Interrupt Request 1
                 .equ   WDTaddr = 0x0006        ; Watchdog Time-out Interrupt
                 .equ   OC2Aaddr        = 0x0007        ; Timer/Counter2 Compare Match A
                 .equ   OC2Baddr        = 0x0008        ; Timer/Counter2 Compare Match A
                 .equ   OVF2addr        = 0x0009        ; Timer/Counter2 Overflow
                 .equ   ICP1addr        = 0x000a        ; Timer/Counter1 Capture Event
                 .equ   OC1Aaddr        = 0x000b        ; Timer/Counter1 Compare Match A
                 .equ   OC1Baddr        = 0x000c        ; Timer/Counter1 Compare Match B
                 .equ   OVF1addr        = 0x000d        ; Timer/Counter1 Overflow
                 .equ   OC0Aaddr        = 0x000e        ; TimerCounter0 Compare Match A
                 .equ   OC0Baddr        = 0x000f        ; TimerCounter0 Compare Match B
                 .equ   OVF0addr        = 0x0010        ; Timer/Couner0 Overflow
                 .equ   SPIaddr = 0x0011        ; SPI Serial Transfer Complete
                 .equ   URXCaddr        = 0x0012        ; USART Rx Complete
                 .equ   UDREaddr        = 0x0013        ; USART, Data Register Empty
                 .equ   UTXCaddr        = 0x0014        ; USART Tx Complete
                 .equ   ADCCaddr        = 0x0015        ; ADC Conversion Complete
                 .equ   ERDYaddr        = 0x0016        ; EEPROM Ready
                 .equ   ACIaddr = 0x0017        ; Analog Comparator
                 .equ   TWIaddr = 0x0018        ; Two-wire Serial Interface
                 .equ   SPMRaddr        = 0x0019        ; Store Program Memory Read
                 
                 .equ   INT_VECTORS_SIZE        = 26    ; size in words
                 
                 #endif  /* _M88DEF_INC_ */
                 
                 ; ***** END OF FILE ******************************************************
                 
                 ; Tests the data movement instructions
                 ; THIS FILE IS GENERATED
                 ; for explanations or modifications, see notebook datamove.ipynb
                 
                 ; Note, we attempt to verify the behavior of the load instructions
                 ; by writing registers out with STS-
                 ; the load tests assume STS is functional.
                 
                 
                 
                 
                 ;PREPROCESS TestLDI
                 
                 ; do a few simple LDIs
000000 e000          LDI     r16    ,$00     ;
000001 9300 0000     STS     $0000  ,r16     ;W 00 0000   r16 should be 0
000003 ef1f          LDI     r17    ,$FF     ;
000004 9310 0000     STS     $0000  ,r17     ;W FF 0000   r17 should be 255
000006 e02f          LDI     r18    ,$0F     ;
000007 9320 0000     STS     $0000  ,r18     ;W 0F 0000   r18 should be 15
                 
                 ; do a fixed LDI into all 16 upper registers
000009 ee0c          LDI     r16    ,$EC     ;
00000a ee1c          LDI     r17    ,$EC     ;
00000b ee2c          LDI     r18    ,$EC     ;
00000c ee3c          LDI     r19    ,$EC     ;
00000d ee4c          LDI     r20    ,$EC     ;
00000e ee5c          LDI     r21    ,$EC     ;
00000f ee6c          LDI     r22    ,$EC     ;
000010 ee7c          LDI     r23    ,$EC     ;
000011 ee8c          LDI     r24    ,$EC     ;
000012 ee9c          LDI     r25    ,$EC     ;
000013 eeac          LDI     r26    ,$EC     ;
000014 eebc          LDI     r27    ,$EC     ;
000015 eecc          LDI     r28    ,$EC     ;
000016 eedc          LDI     r29    ,$EC     ;
000017 eeec          LDI     r30    ,$EC     ;
000018 eefc          LDI     r31    ,$EC     ;
000019 9300 0000     STS     $0000  ,r16     ;W EC 0000   r16 should be 236
00001b 9310 0000     STS     $0000  ,r17     ;W EC 0000   r17 should be 236
00001d 9320 0000     STS     $0000  ,r18     ;W EC 0000   r18 should be 236
00001f 9330 0000     STS     $0000  ,r19     ;W EC 0000   r19 should be 236
000021 9340 0000     STS     $0000  ,r20     ;W EC 0000   r20 should be 236
000023 9350 0000     STS     $0000  ,r21     ;W EC 0000   r21 should be 236
000025 9360 0000     STS     $0000  ,r22     ;W EC 0000   r22 should be 236
000027 9370 0000     STS     $0000  ,r23     ;W EC 0000   r23 should be 236
000029 9380 0000     STS     $0000  ,r24     ;W EC 0000   r24 should be 236
00002b 9390 0000     STS     $0000  ,r25     ;W EC 0000   r25 should be 236
00002d 93a0 0000     STS     $0000  ,r26     ;W EC 0000   r26 should be 236
00002f 93b0 0000     STS     $0000  ,r27     ;W EC 0000   r27 should be 236
000031 93c0 0000     STS     $0000  ,r28     ;W EC 0000   r28 should be 236
000033 93d0 0000     STS     $0000  ,r29     ;W EC 0000   r29 should be 236
000035 93e0 0000     STS     $0000  ,r30     ;W EC 0000   r30 should be 236
000037 93f0 0000     STS     $0000  ,r31     ;W EC 0000   r31 should be 236
                 
                 ; do some random LDIs
000039 ed38          LDI     r19    ,$D8     ;
00003a e100          LDI     r16    ,$10     ;
00003b e0bf          LDI     r27    ,$0F     ;
00003c e24f          LDI     r20    ,$2F     ;
00003d e6ff          LDI     r31    ,$6F     ;
00003e e7d7          LDI     r29    ,$77     ;
00003f e02d          LDI     r18    ,$0D     ;
000040 e615          LDI     r17    ,$65     ;
000041 ed86          LDI     r24    ,$D6     ;
000042 e7c0          LDI     r28    ,$70     ;
000043 9330 0000     STS     $0000  ,r19     ;W D8 0000   r19 should be 216
000045 9300 0000     STS     $0000  ,r16     ;W 10 0000   r16 should be 16
000047 93b0 0000     STS     $0000  ,r27     ;W 0F 0000   r27 should be 15
000049 9340 0000     STS     $0000  ,r20     ;W 2F 0000   r20 should be 47
00004b 93f0 0000     STS     $0000  ,r31     ;W 6F 0000   r31 should be 111
00004d 93d0 0000     STS     $0000  ,r29     ;W 77 0000   r29 should be 119
00004f 9320 0000     STS     $0000  ,r18     ;W 0D 0000   r18 should be 13
000051 9310 0000     STS     $0000  ,r17     ;W 65 0000   r17 should be 101
000053 9380 0000     STS     $0000  ,r24     ;W D6 0000   r24 should be 214
000055 93c0 0000     STS     $0000  ,r28     ;W 70 0000   r28 should be 112
                 
                 
                 
                 ;PREPROCESS TestLD
                 
                 
                 ; do a few simple LDs from X register
000057 e0a4          LDI     r26    ,$04     ;            set X to $0004
000058 e0b0          LDI     r27    ,$00     ;
000059 900c          LD      r0     ,X       ;R EC 0004
00005a 9200 0000     STS     $0000  ,r0      ;W EC 0000   r0 should be 236
00005c 908c          LD      r8     ,X       ;R EC 0004
00005d 9280 0000     STS     $0000  ,r8      ;W EC 0000   r8 should be 236
00005f 919c          LD      r25    ,X       ;R EC 0004
000060 9390 0000     STS     $0000  ,r25     ;W EC 0000   r25 should be 236
                 
                 ; load with pre decrement through 0x0000
000062 90ee          LD      r14    ,-X      ;R D8 0003
000063 912e          LD      r18    ,-X      ;R AE 0002
000064 908e          LD      r8     ,-X      ;R 8E 0001
000065 919e          LD      r25    ,-X      ;R 4F 0000
000066 900e          LD      r0     ,-X      ;R 6E FFFF
000067 918e          LD      r24    ,-X      ;R AC FFFE
000068 905e          LD      r5     ,-X      ;R 34 FFFD
000069 916e          LD      r22    ,-X      ;R 2F FFFC
00006a 92e0 0000     STS     $0000  ,r14     ;W D8 0000   r14 should be 216
00006c 9320 0000     STS     $0000  ,r18     ;W AE 0000   r18 should be 174
00006e 9280 0000     STS     $0000  ,r8      ;W 8E 0000   r8 should be 142
000070 9390 0000     STS     $0000  ,r25     ;W 4F 0000   r25 should be 79
000072 9200 0000     STS     $0000  ,r0      ;W 6E 0000   r0 should be 110
000074 9380 0000     STS     $0000  ,r24     ;W AC 0000   r24 should be 172
000076 9250 0000     STS     $0000  ,r5      ;W 34 0000   r5 should be 52
000078 9360 0000     STS     $0000  ,r22     ;W 2F 0000   r22 should be 47
                 
                 ; load with post increment through 0xFFFF
00007a 90cd          LD      r12    ,X+      ;R 3F FFFC
00007b 903d          LD      r3     ,X+      ;R C1 FFFD
00007c 90bd          LD      r11    ,X+      ;R 28 FFFE
00007d 91dd          LD      r29    ,X+      ;R 96 FFFF
00007e 913d          LD      r19    ,X+      ;R B9 0000
00007f 908d          LD      r8     ,X+      ;R 62 0001
000080 901d          LD      r1     ,X+      ;R 23 0002
000081 90ed          LD      r14    ,X+      ;R 17 0003
000082 92c0 0000     STS     $0000  ,r12     ;W 3F 0000   r12 should be 63
000084 9230 0000     STS     $0000  ,r3      ;W C1 0000   r3 should be 193
000086 92b0 0000     STS     $0000  ,r11     ;W 28 0000   r11 should be 40
000088 93d0 0000     STS     $0000  ,r29     ;W 96 0000   r29 should be 150
00008a 9330 0000     STS     $0000  ,r19     ;W B9 0000   r19 should be 185
00008c 9280 0000     STS     $0000  ,r8      ;W 62 0000   r8 should be 98
00008e 9210 0000     STS     $0000  ,r1      ;W 23 0000   r1 should be 35
000090 92e0 0000     STS     $0000  ,r14     ;W 17 0000   r14 should be 23
                 
                 ; do a few simple LDs from Y register
000092 e0c4          LDI     r28    ,$04     ;            set Y to $0004
000093 e0d0          LDI     r29    ,$00     ;
000094 8008          LD      r0     ,Y       ;R EC 0004
000095 9200 0000     STS     $0000  ,r0      ;W EC 0000   r0 should be 236
000097 8088          LD      r8     ,Y       ;R EC 0004
000098 9280 0000     STS     $0000  ,r8      ;W EC 0000   r8 should be 236
00009a 8198          LD      r25    ,Y       ;R EC 0004
00009b 9390 0000     STS     $0000  ,r25     ;W EC 0000   r25 should be 236
                 
                 ; load with pre decrement through 0x0000
00009d 915a          LD      r21    ,-Y      ;R 8E 0003
00009e 907a          LD      r7     ,-Y      ;R E8 0002
00009f 918a          LD      r24    ,-Y      ;R BA 0001
0000a0 909a          LD      r9     ,-Y      ;R 53 0000
0000a1 902a          LD      r2     ,-Y      ;R BD FFFF
0000a2 91ea          LD      r30    ,-Y      ;R B5 FFFE
0000a3 903a          LD      r3     ,-Y      ;R 6B FFFD
0000a4 90ca          LD      r12    ,-Y      ;R 88 FFFC
0000a5 9350 0000     STS     $0000  ,r21     ;W 8E 0000   r21 should be 142
0000a7 9270 0000     STS     $0000  ,r7      ;W E8 0000   r7 should be 232
0000a9 9380 0000     STS     $0000  ,r24     ;W BA 0000   r24 should be 186
0000ab 9290 0000     STS     $0000  ,r9      ;W 53 0000   r9 should be 83
0000ad 9220 0000     STS     $0000  ,r2      ;W BD 0000   r2 should be 189
0000af 93e0 0000     STS     $0000  ,r30     ;W B5 0000   r30 should be 181
0000b1 9230 0000     STS     $0000  ,r3      ;W 6B 0000   r3 should be 107
0000b3 92c0 0000     STS     $0000  ,r12     ;W 88 0000   r12 should be 136
                 
                 ; load with post increment through 0xFFFF
0000b5 9169          LD      r22    ,Y+      ;R 7D FFFC
0000b6 9159          LD      r21    ,Y+      ;R 53 FFFD
0000b7 9149          LD      r20    ,Y+      ;R EC FFFE
0000b8 9029          LD      r2     ,Y+      ;R C2 FFFF
0000b9 9139          LD      r19    ,Y+      ;R 8A 0000
0000ba 91b9          LD      r27    ,Y+      ;R 70 0001
0000bb 9059          LD      r5     ,Y+      ;R A6 0002
0000bc 9119          LD      r17    ,Y+      ;R 1C 0003
0000bd 9360 0000     STS     $0000  ,r22     ;W 7D 0000   r22 should be 125
0000bf 9350 0000     STS     $0000  ,r21     ;W 53 0000   r21 should be 83
0000c1 9340 0000     STS     $0000  ,r20     ;W EC 0000   r20 should be 236
0000c3 9220 0000     STS     $0000  ,r2      ;W C2 0000   r2 should be 194
0000c5 9330 0000     STS     $0000  ,r19     ;W 8A 0000   r19 should be 138
0000c7 93b0 0000     STS     $0000  ,r27     ;W 70 0000   r27 should be 112
0000c9 9250 0000     STS     $0000  ,r5      ;W A6 0000   r5 should be 166
0000cb 9310 0000     STS     $0000  ,r17     ;W 1C 0000   r17 should be 28
                 
                 ; do a few simple LDs from Z register
0000cd e0e4          LDI     r30    ,$04     ;            set Z to $0004
0000ce e0f0          LDI     r31    ,$00     ;
0000cf 8000          LD      r0     ,Z       ;R EC 0004
0000d0 9200 0000     STS     $0000  ,r0      ;W EC 0000   r0 should be 236
0000d2 8080          LD      r8     ,Z       ;R EC 0004
0000d3 9280 0000     STS     $0000  ,r8      ;W EC 0000   r8 should be 236
0000d5 8190          LD      r25    ,Z       ;R EC 0004
0000d6 9390 0000     STS     $0000  ,r25     ;W EC 0000   r25 should be 236
                 
                 ; load with pre decrement through 0x0000
0000d8 9072          LD      r7     ,-Z      ;R 6C 0003
0000d9 91a2          LD      r26    ,-Z      ;R A1 0002
0000da 9012          LD      r1     ,-Z      ;R 6C 0001
0000db 9192          LD      r25    ,-Z      ;R FF 0000
0000dc 90a2          LD      r10    ,-Z      ;R CA FFFF
0000dd 90c2          LD      r12    ,-Z      ;R EA FFFE
0000de 9082          LD      r8     ,-Z      ;R 49 FFFD
0000df 9022          LD      r2     ,-Z      ;R 87 FFFC
0000e0 9270 0000     STS     $0000  ,r7      ;W 6C 0000   r7 should be 108
0000e2 93a0 0000     STS     $0000  ,r26     ;W A1 0000   r26 should be 161
0000e4 9210 0000     STS     $0000  ,r1      ;W 6C 0000   r1 should be 108
0000e6 9390 0000     STS     $0000  ,r25     ;W FF 0000   r25 should be 255
0000e8 92a0 0000     STS     $0000  ,r10     ;W CA 0000   r10 should be 202
0000ea 92c0 0000     STS     $0000  ,r12     ;W EA 0000   r12 should be 234
0000ec 9280 0000     STS     $0000  ,r8      ;W 49 0000   r8 should be 73
0000ee 9220 0000     STS     $0000  ,r2      ;W 87 0000   r2 should be 135
                 
                 ; load with post increment through 0xFFFF
0000f0 9041          LD      r4     ,Z+      ;R DB FFFC
0000f1 9071          LD      r7     ,Z+      ;R CC FFFD
0000f2 9171          LD      r23    ,Z+      ;R B9 FFFE
0000f3 9111          LD      r17    ,Z+      ;R 70 FFFF
0000f4 91a1          LD      r26    ,Z+      ;R 46 0000
0000f5 9081          LD      r8     ,Z+      ;R FC 0001
0000f6 91b1          LD      r27    ,Z+      ;R 2E 0002
0000f7 9121          LD      r18    ,Z+      ;R 18 0003
0000f8 9240 0000     STS     $0000  ,r4      ;W DB 0000   r4 should be 219
0000fa 9270 0000     STS     $0000  ,r7      ;W CC 0000   r7 should be 204
0000fc 9370 0000     STS     $0000  ,r23     ;W B9 0000   r23 should be 185
0000fe 9310 0000     STS     $0000  ,r17     ;W 70 0000   r17 should be 112
000100 93a0 0000     STS     $0000  ,r26     ;W 46 0000   r26 should be 70
000102 9280 0000     STS     $0000  ,r8      ;W FC 0000   r8 should be 252
000104 93b0 0000     STS     $0000  ,r27     ;W 2E 0000   r27 should be 46
000106 9320 0000     STS     $0000  ,r18     ;W 18 0000   r18 should be 24
                 
                 
                 
                 ;PREPROCESS TestLDD
                 
000108 eec0          LDI     r28    ,$E0     ;            set Y to $FFE0
000109 efdf          LDI     r29    ,$FF     ;
00010a 80c8          LDD     r12    ,Y+0     ;R 3A FFE0
00010b 853e          LDD     r19    ,Y+14    ;R 88 FFEE
00010c 88eb          LDD     r14    ,Y+19    ;R AE FFF3
00010d 890c          LDD     r16    ,Y+20    ;R 39 FFF4
00010e a88e          LDD     r8     ,Y+54    ;R 96 0016
00010f 8518          LDD     r17    ,Y+8     ;R DE FFE8
000110 a809          LDD     r0     ,Y+49    ;R 50 0011
000111 ad5f          LDD     r21    ,Y+63    ;R E8 001F
000112 92c0 0000     STS     $0000  ,r12     ;W 3A 0000   r12 should be 58
000114 9330 0000     STS     $0000  ,r19     ;W 88 0000   r19 should be 136
000116 92e0 0000     STS     $0000  ,r14     ;W AE 0000   r14 should be 174
000118 9300 0000     STS     $0000  ,r16     ;W 39 0000   r16 should be 57
00011a 9280 0000     STS     $0000  ,r8      ;W 96 0000   r8 should be 150
00011c 9310 0000     STS     $0000  ,r17     ;W DE 0000   r17 should be 222
00011e 9200 0000     STS     $0000  ,r0      ;W 50 0000   r0 should be 80
000120 9350 0000     STS     $0000  ,r21     ;W E8 0000   r21 should be 232
000122 eee0          LDI     r30    ,$E0     ;            set Z to $FFE0
000123 efff          LDI     r31    ,$FF     ;
000124 8040          LDD     r4     ,Z+0     ;R A5 FFE0
000125 80b0          LDD     r11    ,Z+0     ;R FA FFE0
000126 a181          LDD     r24    ,Z+33    ;R 09 0001
000127 8856          LDD     r5     ,Z+22    ;R 39 FFF6
000128 8515          LDD     r17    ,Z+13    ;R B9 FFED
000129 a1b6          LDD     r27    ,Z+38    ;R 9D 0006
00012a 8d01          LDD     r16    ,Z+25    ;R 7A FFF9
00012b ac07          LDD     r0     ,Z+63    ;R 1D 001F
00012c 9240 0000     STS     $0000  ,r4      ;W A5 0000   r4 should be 165
00012e 92b0 0000     STS     $0000  ,r11     ;W FA 0000   r11 should be 250
000130 9380 0000     STS     $0000  ,r24     ;W 09 0000   r24 should be 9
000132 9250 0000     STS     $0000  ,r5      ;W 39 0000   r5 should be 57
000134 9310 0000     STS     $0000  ,r17     ;W B9 0000   r17 should be 185
000136 93b0 0000     STS     $0000  ,r27     ;W 9D 0000   r27 should be 157
000138 9300 0000     STS     $0000  ,r16     ;W 7A 0000   r16 should be 122
00013a 9200 0000     STS     $0000  ,r0      ;W 1D 0000   r0 should be 29
                 
                 
                 
                 ;PREPROCESS TestLDS
                 
                 
                 ; do a few simple LDSs
00013c 9000 0000     LDS     r0     ,$0000   ;R EC 0000
00013e 9200 0000     STS     $0000  ,r0      ;W EC 0000   r0 should be 236
000140 90f0 ff00     LDS     r15    ,$FF00   ;R EC FF00
000142 92f0 0000     STS     $0000  ,r15     ;W EC 0000   r15 should be 236
000144 91e0 ffff     LDS     r30    ,$FFFF   ;R EC FFFF
000146 93e0 0000     STS     $0000  ,r30     ;W EC 0000   r30 should be 236
                 
                 ; do some random LDSs
000148 90f0 f358     LDS     r15    ,$F358   ;R 41 F358
00014a 91c0 87b5     LDS     r28    ,$87B5   ;R 54 87B5
00014c 9120 6c70     LDS     r18    ,$6C70   ;R D8 6C70
00014e 9020 9f99     LDS     r2     ,$9F99   ;R 66 9F99
000150 91e0 bf30     LDS     r30    ,$BF30   ;R CC BF30
000152 9170 e729     LDS     r23    ,$E729   ;R E0 E729
000154 91f0 7eed     LDS     r31    ,$7EED   ;R 3D 7EED
000156 91b0 20c8     LDS     r27    ,$20C8   ;R 73 20C8
000158 9110 0ac5     LDS     r17    ,$0AC5   ;R AD 0AC5
00015a 9040 70c0     LDS     r4     ,$70C0   ;R 75 70C0
00015c 92f0 0000     STS     $0000  ,r15     ;W 41 0000   r15 should be 65
00015e 93c0 0000     STS     $0000  ,r28     ;W 54 0000   r28 should be 84
000160 9320 0000     STS     $0000  ,r18     ;W D8 0000   r18 should be 216
000162 9220 0000     STS     $0000  ,r2      ;W 66 0000   r2 should be 102
000164 93e0 0000     STS     $0000  ,r30     ;W CC 0000   r30 should be 204
000166 9370 0000     STS     $0000  ,r23     ;W E0 0000   r23 should be 224
000168 93f0 0000     STS     $0000  ,r31     ;W 3D 0000   r31 should be 61
00016a 93b0 0000     STS     $0000  ,r27     ;W 73 0000   r27 should be 115
00016c 9310 0000     STS     $0000  ,r17     ;W AD 0000   r17 should be 173
00016e 9240 0000     STS     $0000  ,r4      ;W 75 0000   r4 should be 117
                 
                 
                 
                 ;PREPROCESS TestMOV
                 
                 
                 ; do a few simple MOVs
000170 9000 0000     LDS     r0     ,$0000   ;R 03 0000
000172 2c10          MOV     r1     ,r0      ;
000173 9210 0000     STS     $0000  ,r1      ;W 03 0000   r1 should be 3
000175 91f0 0000     LDS     r31    ,$0000   ;R 24 0000
000177 2fef          MOV     r30    ,r31     ;
000178 93e0 0000     STS     $0000  ,r30     ;W 24 0000   r30 should be 36
                 
                 ; do a random move through all registers
00017a 9030 0000     LDS     r3     ,$0000   ;R 1F 0000
00017c 2c73          MOV     r7     ,r3      ;
00017d 2c27          MOV     r2     ,r7      ;
00017e 2dc2          MOV     r28    ,r2      ;
00017f 2e1c          MOV     r1     ,r28     ;
000180 2ca1          MOV     r10    ,r1      ;
000181 2dda          MOV     r29    ,r10     ;
000182 2f0d          MOV     r16    ,r29     ;
000183 2fe0          MOV     r30    ,r16     ;
000184 2e8e          MOV     r8     ,r30     ;
000185 2d58          MOV     r21    ,r8      ;
000186 2ef5          MOV     r15    ,r21     ;
000187 2c6f          MOV     r6     ,r15     ;
000188 2d16          MOV     r17    ,r6      ;
000189 2e41          MOV     r4     ,r17     ;
00018a 2d44          MOV     r20    ,r4      ;
00018b 2f74          MOV     r23    ,r20     ;
00018c 2ec7          MOV     r12    ,r23     ;
00018d 2d8c          MOV     r24    ,r12     ;
00018e 2ee8          MOV     r14    ,r24     ;
00018f 2d3e          MOV     r19    ,r14     ;
000190 2ff3          MOV     r31    ,r19     ;
000191 2fbf          MOV     r27    ,r31     ;
000192 2e9b          MOV     r9     ,r27     ;
000193 2cb9          MOV     r11    ,r9      ;
000194 2d9b          MOV     r25    ,r11     ;
000195 2fa9          MOV     r26    ,r25     ;
000196 2e5a          MOV     r5     ,r26     ;
000197 2d25          MOV     r18    ,r5      ;
000198 2ed2          MOV     r13    ,r18     ;
000199 2c0d          MOV     r0     ,r13     ;
00019a 2d60          MOV     r22    ,r0      ;
00019b 9360 0000     STS     $0000  ,r22     ;W 1F 0000   r22 should be 31
                 
                 
                 
                 ;PREPROCESS TestST
                 
00019d e0a4          LDI     r26    ,$04     ;            set X to $0004
00019e e0b0          LDI     r27    ,$00     ;
00019f 9000 0000     LDS     r0     ,$0000   ;R EC 0000   set r0 to 236
0001a1 920c          ST      X      ,r0      ;W EC 0004
0001a2 9080 0000     LDS     r8     ,$0000   ;R EC 0000   set r8 to 236
0001a4 928c          ST      X      ,r8      ;W EC 0004
0001a5 9190 0000     LDS     r25    ,$0000   ;R EC 0000   set r25 to 236
0001a7 939c          ST      X      ,r25     ;W EC 0004
                 
                 ; store with pre decrement through 0x0000
0001a8 90c0 0000     LDS     r12    ,$0000   ;R E5 0000   set r12 to 229
0001aa 9170 0000     LDS     r23    ,$0000   ;R 47 0000   set r23 to 71
0001ac 90a0 0000     LDS     r10    ,$0000   ;R D8 0000   set r10 to 216
0001ae 9190 0000     LDS     r25    ,$0000   ;R 5D 0000   set r25 to 93
0001b0 9030 0000     LDS     r3     ,$0000   ;R 8E 0000   set r3 to 142
0001b2 9070 0000     LDS     r7     ,$0000   ;R EC 0000   set r7 to 236
0001b4 9060 0000     LDS     r6     ,$0000   ;R 7F 0000   set r6 to 127
0001b6 91e0 0000     LDS     r30    ,$0000   ;R 26 0000   set r30 to 38
0001b8 92ce          ST      -X     ,r12     ;W E5 0003
0001b9 937e          ST      -X     ,r23     ;W 47 0002
0001ba 92ae          ST      -X     ,r10     ;W D8 0001
0001bb 939e          ST      -X     ,r25     ;W 5D 0000
0001bc 923e          ST      -X     ,r3      ;W 8E FFFF
0001bd 927e          ST      -X     ,r7      ;W EC FFFE
0001be 926e          ST      -X     ,r6      ;W 7F FFFD
0001bf 93ee          ST      -X     ,r30     ;W 26 FFFC
                 
                 ; store with post increment through 0xFFFF
0001c0 90e0 0000     LDS     r14    ,$0000   ;R 07 0000   set r14 to 7
0001c2 9190 0000     LDS     r25    ,$0000   ;R 2F 0000   set r25 to 47
0001c4 91d0 0000     LDS     r29    ,$0000   ;R 79 0000   set r29 to 121
0001c6 9110 0000     LDS     r17    ,$0000   ;R 55 0000   set r17 to 85
0001c8 9030 0000     LDS     r3     ,$0000   ;R D0 0000   set r3 to 208
0001ca 9010 0000     LDS     r1     ,$0000   ;R F8 0000   set r1 to 248
0001cc 9140 0000     LDS     r20    ,$0000   ;R F6 0000   set r20 to 246
0001ce 91c0 0000     LDS     r28    ,$0000   ;R 6D 0000   set r28 to 109
0001d0 92ed          ST      X+     ,r14     ;W 07 FFFC
0001d1 939d          ST      X+     ,r25     ;W 2F FFFD
0001d2 93dd          ST      X+     ,r29     ;W 79 FFFE
0001d3 931d          ST      X+     ,r17     ;W 55 FFFF
0001d4 923d          ST      X+     ,r3      ;W D0 0000
0001d5 921d          ST      X+     ,r1      ;W F8 0001
0001d6 934d          ST      X+     ,r20     ;W F6 0002
0001d7 93cd          ST      X+     ,r28     ;W 6D 0003
0001d8 e0c4          LDI     r28    ,$04     ;            set Y to $0004
0001d9 e0d0          LDI     r29    ,$00     ;
0001da 9000 0000     LDS     r0     ,$0000   ;R EC 0000   set r0 to 236
0001dc 8208          ST      Y      ,r0      ;W EC 0004
0001dd 9080 0000     LDS     r8     ,$0000   ;R EC 0000   set r8 to 236
0001df 8288          ST      Y      ,r8      ;W EC 0004
0001e0 9190 0000     LDS     r25    ,$0000   ;R EC 0000   set r25 to 236
0001e2 8398          ST      Y      ,r25     ;W EC 0004
                 
                 ; store with pre decrement through 0x0000
0001e3 91b0 0000     LDS     r27    ,$0000   ;R E8 0000   set r27 to 232
0001e5 90c0 0000     LDS     r12    ,$0000   ;R 92 0000   set r12 to 146
0001e7 9010 0000     LDS     r1     ,$0000   ;R D8 0000   set r1 to 216
0001e9 9050 0000     LDS     r5     ,$0000   ;R F9 0000   set r5 to 249
0001eb 91e0 0000     LDS     r30    ,$0000   ;R 4F 0000   set r30 to 79
0001ed 9000 0000     LDS     r0     ,$0000   ;R 61 0000   set r0 to 97
0001ef 9190 0000     LDS     r25    ,$0000   ;R 97 0000   set r25 to 151
0001f1 9080 0000     LDS     r8     ,$0000   ;R 6F 0000   set r8 to 111
0001f3 93ba          ST      -Y     ,r27     ;W E8 0003
0001f4 92ca          ST      -Y     ,r12     ;W 92 0002
0001f5 921a          ST      -Y     ,r1      ;W D8 0001
0001f6 925a          ST      -Y     ,r5      ;W F9 0000
0001f7 93ea          ST      -Y     ,r30     ;W 4F FFFF
0001f8 920a          ST      -Y     ,r0      ;W 61 FFFE
0001f9 939a          ST      -Y     ,r25     ;W 97 FFFD
0001fa 928a          ST      -Y     ,r8      ;W 6F FFFC
                 
                 ; store with post increment through 0xFFFF
0001fb 9010 0000     LDS     r1     ,$0000   ;R 19 0000   set r1 to 25
0001fd 9120 0000     LDS     r18    ,$0000   ;R F4 0000   set r18 to 244
0001ff 9170 0000     LDS     r23    ,$0000   ;R 50 0000   set r23 to 80
000201 9110 0000     LDS     r17    ,$0000   ;R 1D 0000   set r17 to 29
000203 91f0 0000     LDS     r31    ,$0000   ;R 29 0000   set r31 to 41
000205 91b0 0000     LDS     r27    ,$0000   ;R 5F 0000   set r27 to 95
000207 90a0 0000     LDS     r10    ,$0000   ;R 23 0000   set r10 to 35
000209 9190 0000     LDS     r25    ,$0000   ;R 22 0000   set r25 to 34
00020b 9219          ST      Y+     ,r1      ;W 19 FFFC
00020c 9329          ST      Y+     ,r18     ;W F4 FFFD
00020d 9379          ST      Y+     ,r23     ;W 50 FFFE
00020e 9319          ST      Y+     ,r17     ;W 1D FFFF
00020f 93f9          ST      Y+     ,r31     ;W 29 0000
000210 93b9          ST      Y+     ,r27     ;W 5F 0001
000211 92a9          ST      Y+     ,r10     ;W 23 0002
000212 9399          ST      Y+     ,r25     ;W 22 0003
000213 e0e4          LDI     r30    ,$04     ;            set Z to $0004
000214 e0f0          LDI     r31    ,$00     ;
000215 9000 0000     LDS     r0     ,$0000   ;R EC 0000   set r0 to 236
000217 8200          ST      Z      ,r0      ;W EC 0004
000218 9080 0000     LDS     r8     ,$0000   ;R EC 0000   set r8 to 236
00021a 8280          ST      Z      ,r8      ;W EC 0004
00021b 9190 0000     LDS     r25    ,$0000   ;R EC 0000   set r25 to 236
00021d 8390          ST      Z      ,r25     ;W EC 0004
                 
                 ; store with pre decrement through 0x0000
00021e 9150 0000     LDS     r21    ,$0000   ;R 14 0000   set r21 to 20
000220 91b0 0000     LDS     r27    ,$0000   ;R 29 0000   set r27 to 41
000222 9070 0000     LDS     r7     ,$0000   ;R D6 0000   set r7 to 214
000224 90c0 0000     LDS     r12    ,$0000   ;R A1 0000   set r12 to 161
000226 9030 0000     LDS     r3     ,$0000   ;R 85 0000   set r3 to 133
000228 9120 0000     LDS     r18    ,$0000   ;R 68 0000   set r18 to 104
00022a 91c0 0000     LDS     r28    ,$0000   ;R A0 0000   set r28 to 160
00022c 9180 0000     LDS     r24    ,$0000   ;R 7A 0000   set r24 to 122
00022e 9352          ST      -Z     ,r21     ;W 14 0003
00022f 93b2          ST      -Z     ,r27     ;W 29 0002
000230 9272          ST      -Z     ,r7      ;W D6 0001
000231 92c2          ST      -Z     ,r12     ;W A1 0000
000232 9232          ST      -Z     ,r3      ;W 85 FFFF
000233 9322          ST      -Z     ,r18     ;W 68 FFFE
000234 93c2          ST      -Z     ,r28     ;W A0 FFFD
000235 9382          ST      -Z     ,r24     ;W 7A FFFC
                 
                 ; store with post increment through 0xFFFF
000236 9080 0000     LDS     r8     ,$0000   ;R 25 0000   set r8 to 37
000238 90c0 0000     LDS     r12    ,$0000   ;R 04 0000   set r12 to 4
00023a 9040 0000     LDS     r4     ,$0000   ;R EA 0000   set r4 to 234
00023c 9150 0000     LDS     r21    ,$0000   ;R 33 0000   set r21 to 51
00023e 9140 0000     LDS     r20    ,$0000   ;R 25 0000   set r20 to 37
000240 9090 0000     LDS     r9     ,$0000   ;R 6D 0000   set r9 to 109
000242 90e0 0000     LDS     r14    ,$0000   ;R 87 0000   set r14 to 135
000244 90a0 0000     LDS     r10    ,$0000   ;R 43 0000   set r10 to 67
000246 9281          ST      Z+     ,r8      ;W 25 FFFC
000247 92c1          ST      Z+     ,r12     ;W 04 FFFD
000248 9241          ST      Z+     ,r4      ;W EA FFFE
000249 9351          ST      Z+     ,r21     ;W 33 FFFF
00024a 9341          ST      Z+     ,r20     ;W 25 0000
00024b 9291          ST      Z+     ,r9      ;W 6D 0001
00024c 92e1          ST      Z+     ,r14     ;W 87 0002
00024d 92a1          ST      Z+     ,r10     ;W 43 0003
                 
                 
                 
                 ;PREPROCESS TestSTD
                 
00024e eec0          LDI     r28    ,$E0     ;            set Y to $FFE0
00024f efdf          LDI     r29    ,$FF     ;
000250 90e0 0000     LDS     r14    ,$0000   ;R 04 0000   set r14 to 4
000252 91a0 0000     LDS     r26    ,$0000   ;R 99 0000   set r26 to 153
000254 9110 0000     LDS     r17    ,$0000   ;R 35 0000   set r17 to 53
000256 9160 0000     LDS     r22    ,$0000   ;R 44 0000   set r22 to 68
000258 9090 0000     LDS     r9     ,$0000   ;R 87 0000   set r9 to 135
00025a 9130 0000     LDS     r19    ,$0000   ;R 3B 0000   set r19 to 59
00025c 9140 0000     LDS     r20    ,$0000   ;R 36 0000   set r20 to 54
00025e 9100 0000     LDS     r16    ,$0000   ;R 4F 0000   set r16 to 79
000260 82e8          STD     Y+0    ,r14     ;W 04 FFE0
000261 a7ac          STD     Y+44   ,r26     ;W 99 000C
000262 8718          STD     Y+8    ,r17     ;W 35 FFE8
000263 8f6f          STD     Y+31   ,r22     ;W 44 FFFF
000264 a69f          STD     Y+47   ,r9      ;W 87 000F
000265 a33c          STD     Y+36   ,r19     ;W 3B 0004
000266 8b4c          STD     Y+20   ,r20     ;W 36 FFF4
000267 af0f          STD     Y+63   ,r16     ;W 4F 001F
000268 eee0          LDI     r30    ,$E0     ;            set Z to $FFE0
000269 efff          LDI     r31    ,$FF     ;
00026a 9100 0000     LDS     r16    ,$0000   ;R 16 0000   set r16 to 22
00026c 90f0 0000     LDS     r15    ,$0000   ;R 01 0000   set r15 to 1
00026e 9080 0000     LDS     r8     ,$0000   ;R AA 0000   set r8 to 170
000270 9010 0000     LDS     r1     ,$0000   ;R 42 0000   set r1 to 66
000272 9020 0000     LDS     r2     ,$0000   ;R 86 0000   set r2 to 134
000274 9140 0000     LDS     r20    ,$0000   ;R 52 0000   set r20 to 82
000276 90d0 0000     LDS     r13    ,$0000   ;R E2 0000   set r13 to 226
000278 91b0 0000     LDS     r27    ,$0000   ;R DA 0000   set r27 to 218
00027a 8300          STD     Z+0    ,r16     ;W 16 FFE0
00027b a2f2          STD     Z+34   ,r15     ;W 01 0002
00027c a284          STD     Z+36   ,r8      ;W AA 0004
00027d 8e12          STD     Z+26   ,r1      ;W 42 FFFA
00027e a623          STD     Z+43   ,r2      ;W 86 000B
00027f 8f42          STD     Z+26   ,r20     ;W 52 FFFA
000280 a2d1          STD     Z+33   ,r13     ;W E2 0001
000281 afb7          STD     Z+63   ,r27     ;W DA 001F
                 
                 
                 
                 ;PREPROCESS TestSTS
                 
                 
                 ; do a few simple STSs
000282 9000 0000     LDS     r0     ,$0000   ;R EC 0000   set r0 to 236
000284 9200 0000     STS     $0000  ,r0      ;W EC 0000
000286 90f0 0000     LDS     r15    ,$0000   ;R EC 0000   set r15 to 236
000288 92f0 ff00     STS     $FF00  ,r15     ;W EC FF00
00028a 91e0 0000     LDS     r30    ,$0000   ;R EC 0000   set r30 to 236
00028c 93e0 ffff     STS     $FFFF  ,r30     ;W EC FFFF
                 
                 ; do some random STSs
00028e 9000 0000     LDS     r0     ,$0000   ;R 4B 0000   set r0 to 75
000290 9030 0000     LDS     r3     ,$0000   ;R 41 0000   set r3 to 65
000292 9020 0000     LDS     r2     ,$0000   ;R 9D 0000   set r2 to 157
000294 91c0 0000     LDS     r28    ,$0000   ;R 14 0000   set r28 to 20
000296 9160 0000     LDS     r22    ,$0000   ;R 6B 0000   set r22 to 107
000298 9040 0000     LDS     r4     ,$0000   ;R 34 0000   set r4 to 52
00029a 9110 0000     LDS     r17    ,$0000   ;R D0 0000   set r17 to 208
00029c 9010 0000     LDS     r1     ,$0000   ;R 79 0000   set r1 to 121
00029e 90b0 0000     LDS     r11    ,$0000   ;R 5A 0000   set r11 to 90
0002a0 9120 0000     LDS     r18    ,$0000   ;R 0C 0000   set r18 to 12
0002a2 9200 dc0d     STS     $DC0D  ,r0      ;W 4B DC0D
0002a4 9230 156a     STS     $156A  ,r3      ;W 41 156A
0002a6 9220 bab3     STS     $BAB3  ,r2      ;W 9D BAB3
0002a8 93c0 b732     STS     $B732  ,r28     ;W 14 B732
0002aa 9360 7fc2     STS     $7FC2  ,r22     ;W 6B 7FC2
0002ac 9240 b515     STS     $B515  ,r4      ;W 34 B515
0002ae 9310 4f21     STS     $4F21  ,r17     ;W D0 4F21
0002b0 9210 5333     STS     $5333  ,r1      ;W 79 5333
0002b2 92b0 d318     STS     $D318  ,r11     ;W 5A D318
0002b4 9320 5bd5     STS     $5BD5  ,r18     ;W 0C 5BD5
                 
                 ;PREPROCESS TestPUSH
                 
                 ;PREPROCESS TestPOP
                 
                 ; load some random values into registers
0002b6 9150 0000     LDS     r21    ,$0000   ;R 0E 0000   set r21 to 14
0002b8 9190 0000     LDS     r25    ,$0000   ;R 3B 0000   set r25 to 59
0002ba 91d0 0000     LDS     r29    ,$0000   ;R 85 0000   set r29 to 133
0002bc 90d0 0000     LDS     r13    ,$0000   ;R 5B 0000   set r13 to 91
0002be 91e0 0000     LDS     r30    ,$0000   ;R 87 0000   set r30 to 135
0002c0 91f0 0000     LDS     r31    ,$0000   ;R 13 0000   set r31 to 19
0002c2 9170 0000     LDS     r23    ,$0000   ;R 37 0000   set r23 to 55
0002c4 9070 0000     LDS     r7     ,$0000   ;R DE 0000   set r7 to 222
0002c6 9080 0000     LDS     r8     ,$0000   ;R B0 0000   set r8 to 176
0002c8 9050 0000     LDS     r5     ,$0000   ;R A0 0000   set r5 to 160
0002ca 9030 0000     LDS     r3     ,$0000   ;R DF 0000   set r3 to 223
0002cc 90c0 0000     LDS     r12    ,$0000   ;R 3B 0000   set r12 to 59
0002ce 9010 0000     LDS     r1     ,$0000   ;R C5 0000   set r1 to 197
0002d0 90f0 0000     LDS     r15    ,$0000   ;R 61 0000   set r15 to 97
0002d2 9180 0000     LDS     r24    ,$0000   ;R 82 0000   set r24 to 130
0002d4 9060 0000     LDS     r6     ,$0000   ;R 16 0000   set r6 to 22
0002d6 90e0 0000     LDS     r14    ,$0000   ;R DF 0000   set r14 to 223
0002d8 9160 0000     LDS     r22    ,$0000   ;R 00 0000   set r22 to 0
0002da 9040 0000     LDS     r4     ,$0000   ;R 64 0000   set r4 to 100
0002dc 9140 0000     LDS     r20    ,$0000   ;R BA 0000   set r20 to 186
0002de 91a0 0000     LDS     r26    ,$0000   ;R DC 0000   set r26 to 220
0002e0 90b0 0000     LDS     r11    ,$0000   ;R 23 0000   set r11 to 35
0002e2 9000 0000     LDS     r0     ,$0000   ;R A9 0000   set r0 to 169
0002e4 90a0 0000     LDS     r10    ,$0000   ;R A0 0000   set r10 to 160
0002e6 9100 0000     LDS     r16    ,$0000   ;R 3F 0000   set r16 to 63
0002e8 9020 0000     LDS     r2     ,$0000   ;R 99 0000   set r2 to 153
0002ea 9110 0000     LDS     r17    ,$0000   ;R 9E 0000   set r17 to 158
0002ec 9090 0000     LDS     r9     ,$0000   ;R D1 0000   set r9 to 209
0002ee 9120 0000     LDS     r18    ,$0000   ;R A7 0000   set r18 to 167
0002f0 9130 0000     LDS     r19    ,$0000   ;R CE 0000   set r19 to 206
0002f2 91b0 0000     LDS     r27    ,$0000   ;R 97 0000   set r27 to 151
0002f4 91c0 0000     LDS     r28    ,$0000   ;R 41 0000   set r28 to 65
                 
                 ; push all the registers
0002f6 935f          PUSH    r21             ;W 0E 0000
0002f7 939f          PUSH    r25             ;W 3B FFFF
0002f8 93df          PUSH    r29             ;W 85 FFFE
0002f9 92df          PUSH    r13             ;W 5B FFFD
0002fa 93ef          PUSH    r30             ;W 87 FFFC
0002fb 93ff          PUSH    r31             ;W 13 FFFB
0002fc 937f          PUSH    r23             ;W 37 FFFA
0002fd 927f          PUSH    r7              ;W DE FFF9
0002fe 928f          PUSH    r8              ;W B0 FFF8
0002ff 925f          PUSH    r5              ;W A0 FFF7
000300 923f          PUSH    r3              ;W DF FFF6
000301 92cf          PUSH    r12             ;W 3B FFF5
000302 921f          PUSH    r1              ;W C5 FFF4
000303 92ff          PUSH    r15             ;W 61 FFF3
000304 938f          PUSH    r24             ;W 82 FFF2
000305 926f          PUSH    r6              ;W 16 FFF1
000306 92ef          PUSH    r14             ;W DF FFF0
000307 936f          PUSH    r22             ;W 00 FFEF
000308 924f          PUSH    r4              ;W 64 FFEE
000309 934f          PUSH    r20             ;W BA FFED
00030a 93af          PUSH    r26             ;W DC FFEC
00030b 92bf          PUSH    r11             ;W 23 FFEB
00030c 920f          PUSH    r0              ;W A9 FFEA
00030d 92af          PUSH    r10             ;W A0 FFE9
00030e 930f          PUSH    r16             ;W 3F FFE8
00030f 922f          PUSH    r2              ;W 99 FFE7
000310 931f          PUSH    r17             ;W 9E FFE6
000311 929f          PUSH    r9              ;W D1 FFE5
000312 932f          PUSH    r18             ;W A7 FFE4
000313 933f          PUSH    r19             ;W CE FFE3
000314 93bf          PUSH    r27             ;W 97 FFE2
000315 93cf          PUSH    r28             ;W 41 FFE1
                 
                 ; pop all the registers
000316 91cf          POP     r28             ;R 41 FFE1
000317 91bf          POP     r27             ;R 97 FFE2
000318 913f          POP     r19             ;R CE FFE3
000319 912f          POP     r18             ;R A7 FFE4
00031a 909f          POP     r9              ;R D1 FFE5
00031b 911f          POP     r17             ;R 9E FFE6
00031c 902f          POP     r2              ;R 99 FFE7
00031d 910f          POP     r16             ;R 3F FFE8
00031e 90af          POP     r10             ;R A0 FFE9
00031f 900f          POP     r0              ;R A9 FFEA
000320 90bf          POP     r11             ;R 23 FFEB
000321 91af          POP     r26             ;R DC FFEC
000322 914f          POP     r20             ;R BA FFED
000323 904f          POP     r4              ;R 64 FFEE
000324 916f          POP     r22             ;R 00 FFEF
000325 90ef          POP     r14             ;R DF FFF0
000326 906f          POP     r6              ;R 16 FFF1
000327 918f          POP     r24             ;R 82 FFF2
000328 90ff          POP     r15             ;R 61 FFF3
000329 901f          POP     r1              ;R C5 FFF4
00032a 90cf          POP     r12             ;R 3B FFF5
00032b 903f          POP     r3              ;R DF FFF6
00032c 905f          POP     r5              ;R A0 FFF7
00032d 908f          POP     r8              ;R B0 FFF8
00032e 907f          POP     r7              ;R DE FFF9
00032f 917f          POP     r23             ;R 37 FFFA
000330 91ff          POP     r31             ;R 13 FFFB
000331 91ef          POP     r30             ;R 87 FFFC
000332 90df          POP     r13             ;R 5B FFFD
000333 91df          POP     r29             ;R 85 FFFE
000334 919f          POP     r25             ;R 3B FFFF
000335 915f          POP     r21             ;R 0E 0000
                 
                 ; check all the values are unchanged
000336 9350 0000     STS     $0000  ,r21     ;W 0E 0000   r21 should be 14
000338 9390 0000     STS     $0000  ,r25     ;W 3B 0000   r25 should be 59
00033a 93d0 0000     STS     $0000  ,r29     ;W 85 0000   r29 should be 133
00033c 92d0 0000     STS     $0000  ,r13     ;W 5B 0000   r13 should be 91
00033e 93e0 0000     STS     $0000  ,r30     ;W 87 0000   r30 should be 135
000340 93f0 0000     STS     $0000  ,r31     ;W 13 0000   r31 should be 19
000342 9370 0000     STS     $0000  ,r23     ;W 37 0000   r23 should be 55
000344 9270 0000     STS     $0000  ,r7      ;W DE 0000   r7 should be 222
000346 9280 0000     STS     $0000  ,r8      ;W B0 0000   r8 should be 176
000348 9250 0000     STS     $0000  ,r5      ;W A0 0000   r5 should be 160
00034a 9230 0000     STS     $0000  ,r3      ;W DF 0000   r3 should be 223
00034c 92c0 0000     STS     $0000  ,r12     ;W 3B 0000   r12 should be 59
00034e 9210 0000     STS     $0000  ,r1      ;W C5 0000   r1 should be 197
000350 92f0 0000     STS     $0000  ,r15     ;W 61 0000   r15 should be 97
000352 9380 0000     STS     $0000  ,r24     ;W 82 0000   r24 should be 130
000354 9260 0000     STS     $0000  ,r6      ;W 16 0000   r6 should be 22
000356 92e0 0000     STS     $0000  ,r14     ;W DF 0000   r14 should be 223
000358 9360 0000     STS     $0000  ,r22     ;W 00 0000   r22 should be 0
00035a 9240 0000     STS     $0000  ,r4      ;W 64 0000   r4 should be 100
00035c 9340 0000     STS     $0000  ,r20     ;W BA 0000   r20 should be 186
00035e 93a0 0000     STS     $0000  ,r26     ;W DC 0000   r26 should be 220
000360 92b0 0000     STS     $0000  ,r11     ;W 23 0000   r11 should be 35
000362 9200 0000     STS     $0000  ,r0      ;W A9 0000   r0 should be 169
000364 92a0 0000     STS     $0000  ,r10     ;W A0 0000   r10 should be 160
000366 9300 0000     STS     $0000  ,r16     ;W 3F 0000   r16 should be 63
000368 9220 0000     STS     $0000  ,r2      ;W 99 0000   r2 should be 153
00036a 9310 0000     STS     $0000  ,r17     ;W 9E 0000   r17 should be 158
00036c 9290 0000     STS     $0000  ,r9      ;W D1 0000   r9 should be 209
00036e 9320 0000     STS     $0000  ,r18     ;W A7 0000   r18 should be 167
000370 9330 0000     STS     $0000  ,r19     ;W CE 0000   r19 should be 206
000372 93b0 0000     STS     $0000  ,r27     ;W 97 0000   r27 should be 151


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega88" register use summary:
r0 :  34 r1 :  22 r2 :  18 r3 :  18 r4 :  16 r5 :  14 r6 :   8 r7 :  16 
r8 :  34 r9 :  12 r10:  14 r11:  12 r12:  22 r13:   8 r14:  18 r15:  14 
r16:  20 r17:  30 r18:  24 r19:  18 r20:  20 r21:  18 r22:  16 r23:  16 
r24:  18 r25:  32 r26:  16 r27:  28 r28:  22 r29:  18 r30:  26 r31:  20 
x  :  38 y  :  54 z  :  54 
Registers used: 35 out of 35 (100.0%)

"ATmega88" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   0 adiw  :   0 and   :   0 
andi  :   0 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :   0 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :   0 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 cbi   :   0 cbr   :   0 clc   :   0 
clh   :   0 cli   :   0 cln   :   0 clr   :   0 cls   :   0 clt   :   0 
clv   :   0 clz   :   0 com   :   0 cp    :   0 cpc   :   0 cpi   :   0 
cpse  :   0 dec   :   0 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 
icall :   0 ijmp  :   0 in    :   0 inc   :   0 ld    :  57 ldd   :  16 
ldi   :  49 lds   : 134 lpm   :   0 lsl   :   0 lsr   :   0 mov   :  33 
movw  :   0 mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 
or    :   0 ori   :   0 out   :   0 pop   :  32 push  :  32 rcall :   0 
ret   :   0 reti  :   0 rjmp  :   0 rol   :   0 ror   :   0 sbc   :   0 
sbci  :   0 sbi   :   0 sbic  :   0 sbis  :   0 sbiw  :   0 sbr   :   0 
sbrc  :   0 sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 sen   :   0 
ser   :   0 ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :  57 std   :  16 sts   : 163 sub   :   0 subi  :   0 
swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 10 out of 111 (9.0%)

"ATmega88" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0006ec   1772      0   1772    8192  21.6%
[.dseg] 0x000100 0x000100      0      0      0    1024   0.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 0 warnings
